object SyntaxManager: TSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal55: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        VertAlignment = vaTop
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Asm BG'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id keyword'
        StyleName = 'Reserved word'
        TokenType = 7
        Expression = '\b(catch|else|for|if|switch|while)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+L?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 6
        Expression = '\#\s*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;:]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*=<>&/\|\^\.!\\\?%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NotCollapsed = True
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
        AutoCloseText = '}'#13#10
      end
      item
        DisplayName = 'func *'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '*')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        GrammaRuleName = 'comments'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'define'
        ConditionList = <
          item
            TagList.Strings = (
              '\#\s*define')
            CondType = tcMask
            TokenTypes = 576
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'struct')
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 4
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'asm-string'
        StyleName = 'Asm BG'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
      end
      item
        DisplayName = 'asm-endasm'
        Enabled = False
        StyleName = 'Preprocessor'
        StartExpression = '\#asm'
        EndExpression = '\#endasm'
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      '/* Test */'
      '#define sum(a, b) a+b '
      '#asm (" mov ax, F0h ")'
      ''
      'void stdcall Init(void) {'
      '  TestModDeinit(B64UTIL);'
      '}'
      ''
      '    char* Small(int a) {'
      '    }'
      '     '
      'void Test(char *Sender)'
      '{'
      '  int Number = 10;  // View integer number style'
      '  double F = 1e2 + 0.123e+2;  // View float number style'
      
        '  Caption = "Number is " + IntToStr(Number); // View string styl' +
        'e'
      '  Number += 0x1FA7; // View HEX style'
      '  char c = '#39'D'#39';'
      '  for (i=0; i<5; i++) {'
      '  } '
      '  if (c=='#39'A'#39') {'
      '    return;'
      '  }'
      '}'
      ''
      'typedef struct HashTab {'
      '   int Name;'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
      'Preprocessor'
      'Id keyword')
    Extentions = 'c h ch'
    LexerName = 'C'
    Notes.Strings = (
      'Heavily redone by Alexey (SynWrite)')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal78: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block BG'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Asm BG'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14938312
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Id in angles'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id keyword'
        StyleName = 'Id keyword'
        TokenType = 7
        Expression = '\b(catch|else|for|if|switch|while)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '\~?[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+L?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 6
        Expression = '\#\s*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id <name>'
        StyleName = 'Id in angles'
        TokenType = 2
        Expression = '<\w+>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol { }'
        StyleName = 'Symbol'
        TokenType = 8
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol ::'
        StyleName = 'Symbol'
        TokenType = 9
        Expression = ':: | \->'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol ( )'
        StyleName = 'Symbol'
        TokenType = 10
        Expression = '[\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*=<>&/\|\^\.!\?%\\:]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol single'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'namespace'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'size_t'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 256
          end
          item
            CondType = tcSkip
            TokenTypes = 62
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = 'class %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func :: ::'
        ConditionList = <
          item
            TagList.Strings = (
              ':'
              '{')
            TokenTypes = 264
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 1024
          end
          item
            CondType = tcSkip
            TokenTypes = 62
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 1024
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%s-4'
        GroupFmt = '%s0\%s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = '%sz0...'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func ::'
        ConditionList = <
          item
            TagList.Strings = (
              ':'
              '{')
            TokenTypes = 264
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 1024
          end
          item
            CondType = tcSkip
            TokenTypes = 62
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 1024
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%s-2'
        GroupFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = '%sz0...'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 256
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 1024
          end
          item
            CondType = tcSkip
            TokenTypes = 62
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 1024
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 10
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = '%sz-1...'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block BG'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 256
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... %ez0'
        IgnoreAsParent = False
        AutoCloseText = '}'
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 256
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '}')
            TokenTypes = 256
          end
          item
            CondType = tcSkip
            TokenTypes = 62
          end
          item
            TagList.Strings = (
              '{')
            TokenTypes = 256
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'struct')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'typedef')
            TokenTypes = 4
          end>
        NameFmt = '%e0'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'asm_string'
        Enabled = False
        StyleName = 'Asm BG'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
        IncludeBounds = True
      end>
    SampleText.Strings = (
      '/* Test */'
      '#define max(a, b) ((a > b) ? a : b)'
      '#asm(" pop ax ");'
      'strcpy(b, "text\"text");'
      'double F = 1e2 + 0.12e+2 + 0xAF;'
      'name = name<CName>'
      ''
      'Id Template::getTemplate(const string &id) const { '
      '  return id;'
      '}'
      ''
      'void CNested1::CMonitor(MonitorIT* part) {'
      '}'
      ''
      'void CNested2::CMonitor::connectMonitorIT(MonitorIT* part) {'
      '  return this;'
      '}'
      ''
      
        'floatFlowInterface* CNested2::CMonitor::getItsFloatFlowInterface' +
        '() {'
      '  return this;'
      '}'
      ''
      ''
      'class CName1 {'
      '}'
      ' '
      'class CName2 : public NameB {'
      '    const int tot;'
      '    unsigned long fib(unsigned long n) {'
      '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
      '    }'
      '}'
      '      '
      'void __fastcall CForm->Button1Click(Sender: TObject) {'
      '  //Test'
      '}'
      ''
      'void main(int argc; char* argv) {'
      '  //Test'
      '}'
      ''
      'typedef struct'
      '{'
      #9'void* FieldValue;'
      #9'int flags;'
      '} Struct1;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
      'Preprocessor'
      'Id keyword'
      'Symbol {}'
      'Symbol ::'
      'Symbol ()')
    Extentions = 'c cpp cxx h hpp hxx inl cc'
    LexerName = 'C++'
    Notes.Strings = (
      'Redone: Alex (SynWrite)')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id std'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '[\da-f]+h \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_%]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\.,:\-\+\*\\/%@<>\(\)\[\]\{\}\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'si'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keywords'
        StyleName = 'Id std'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg'
        ConditionList = <
          item
            TagList.Strings = (
              'segment')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'seg end'
        NameFmt = 'segment %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ends')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              'proc')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endp')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro'
        ConditionList = <
          item
            TagList.Strings = (
              'macro')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'macro end'
        NameFmt = 'macro %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro%'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '%macro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'macro% end'
        NameFmt = 'macro %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro% end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '%endmacro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      'CODE SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39'Hello World'#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      '    RET'
      '    '
      'test1 PROC NEAR'
      '      MOV ax,10'
      '      CALL test2'
      '      RET'
      'test1 ENDP'
      ''
      'test2 PROC FAR'
      '      ADD ax,ax'
      '      RET'
      'test2 ENDP'
      ''
      'CODE ENDS'
      '  '
      'PUSHALL MACRO'
      '       PUSH AX BX CX DX'
      '       PUSH DS SI'
      '       PUSH ES DI'
      #9'ENDM'
      '    '
      '; nasm macro taking 1 par'
      '%MACRO DOSB 1'
      '           mov ah, %1'
      '           int 21h'
      '%ENDMACRO    '
      '  '
      'END')
    TokenTypeNames.Strings = (
      'Label'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number')
    Extentions = 'asm'
    LexerName = 'Assembly'
    Notes.Strings = (
      'Original from EControl,'
      'changes by Alexey (SynWrite)'
      '+ macros/procs/segments in tree (for MASM/NASM)'
      '+ parser "symbol"'
      '* renamed styles')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clMoneyGreen
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region Name'
        StyleName = 'Preprocessor'
        BlockName = 'Region header'
        TokenType = 10
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reserved Id'
        StyleName = 'Reserved word'
        Expression = '#to not catch by Func rule'#13#10'\b(if | foreach | while | catch)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#region'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.@]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'where'
              'while'
              'yield')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*')
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '('
              'class')
            CondType = tcNotEqual
            TokenTypes = 12
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        NameFmt = '%s-1~s[(]1'
        RefToCondEnd = True
        HighlightPos = cpBound
        GrammaRuleName = 'func'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'namespace'
        ConditionList = <
          item
            TagList.Strings = (
              'namespace')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpBound
        TreeItemImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockName = '{'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Region header'
        ConditionList = <
          item
            TagList.Strings = (
              '#region')
            TokenTypes = 512
            IgnoreCase = True
          end>
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Region header end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Region header'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'prop begin'
        BlockName = 'prop begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'get'
              'set')
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'prop end'
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'prop end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'prop begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'enum begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'enum')
            TokenTypes = 4
          end>
        BlockEnd = 'enum end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'enum end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'enum begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'indexer begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'this')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'indexer end'
        NameFmt = 'indexer %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'indexer end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'indexer begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'struct')
            TokenTypes = 4
          end>
        BlockEnd = 'struct end'
        NameFmt = '%s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'struct begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'oper begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'operator')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'oper end'
        NameFmt = 'operator %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'oper end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'oper begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'field'
        ConditionList = <
          item
            TagList.Strings = (
              ','
              ';'
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcMask
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'private'
              'public'
              'static')
            TokenTypes = 4
          end>
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        GrammaRuleName = 'field'
        TreeItemImage = 3
        IgnoreAsParent = False
      end
      item
        DisplayName = 'delegate begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              'delegate')
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 3
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '//C# syntax highlighting'
      'enum Days {P1, P2, P3};'
      ' '
      'public class Stack: IEdit, IEdit2'
      '{'
      '  public delegate int[] DelDemo();'
      '  private Node first = null;'
      '  public bool Empty {'
      '    //property'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object IEdit.Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can'#39't Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '  '
      '  static void RegisterFunction(Type reg1; Type2 reg2)'
      '  {'
      '    CategoryRegistration(registerType);'
      '  }'
      ''
      '  [ComUnregisterFunction()]'
      '  [ComVisible(false)] '
      
        '  static void UnregisterFunction(Type reg1; Type[] regs; Type2 r' +
        'eg2)'
      '  {'
      '    CategoryUnregistration(registerType);'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Region name')
    Gramma.Gramma = 
      'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#13#10'f' +
      'ield = ('#39'private'#39' | '#39'public'#39' | '#39'static'#39') Complex_name <Identifie' +
      'r> ('#39'='#39' | '#39','#39' | '#39';'#39');'#13#10#13#10'Params = <Identifier> | Params <Identif' +
      'ier> | Params ('#39','#39' | '#39'.'#39' | '#39';'#39' | '#39':'#39' | '#39'['#39' | '#39']'#39');'#13#10'func = <Iden' +
      'tifier> ('#39'['#39' '#39']'#39')? Complex_name '#39'('#39' Params? '#39')'#39' '#39'{'#39';'#13#10
    Extentions = 'cs'
    LexerName = 'C#'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$\w+::\w+ |'#13#10'[\$\#%@]+\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex subst'
        StyleName = 'String regex'
        TokenType = 4
        Expression = 's/ (\\/|.)*? / (\\/|.)*? / \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '\w* / (\\/|.)+? (/|$) \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\\\|\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?!@&%\|~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 1028
          end>
        BlockEnd = '}'
        NameFmt = 'sub %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'sub %s-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      ''
      '$re = m/text/i; #Usual regex'
      '$sLine =~ s/x/y/; #Subst regex'
      '$sLine =~ s/x\/y/y\*z/g; #Subst too'
      ''
      '$MyVar or $MyLib::MyVar '
      'or @MyArray or $#MyArray or %MyHash'
      ''
      'sub MyOpen(*$) {  # debug'
      '  my ($sKey);'
      '}  '
      ''
      'sub WriteBack() {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}'
      ''
      'sub Some {'
      '  print "Test";'
      '  while (test) {'
      '    print "TT";'
      '  }  '
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'String 2')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'pl pm cgi pod plx'
    LexerName = 'Perl'
    Notes.Strings = (
      'Fixes by Alex, uvviewsoft.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Blob Data'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Blob data'
        StyleName = 'Blob Data'
        BlockName = 'Blob begin'
        Expression = '[^\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w\.]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\{\}\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'end'
              'inherited'
              'inline'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'inherited'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1%s-2 %s-3'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '%s0 %s-1%s-2 %s-3'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection begin'
        ConditionList = <
          item
            TagList.Strings = (
              '<')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'Collection end'
        NameFmt = '%s2 (collection)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '< %s2 >'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'List end'
        NameFmt = '%s2 (list)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '( %s2 )'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob begin'
        StyleName = 'Blob Data'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Blob end'
        HighlightPos = cpBound
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{ Delphi/C++ Builder Form Definitions }'
      'object TestForm: TTestForm'
      '  Left = 200'
      '  Top = 100'
      '  Caption = '#39'Sample source'#39
      '  SampleText.Strings = ('
      '    '#39'Test'#39')'
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Extentions = 'dfm lfm lxl lcf fmx xfm'
    LexerName = 'Delphi resources'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal21: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Value'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*? ("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        TokenType = 5
        Expression = '^\x20*? \w+ \x20*? (?=(=|:=))  '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 8
        Expression = '^\x20*? \w+ \x20*? (?=:)  '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        Expression = '\$\(\w+\) | \$\{\w+\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 7
        Expression = '\[\w+\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;:,%\(\)\[\]\\@=\*>\+!\^\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyword'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'define'
              'else'
              'endef'
              'endif'
              'export'
              'ifdef'
              'ifeq'
              'ifndef'
              'ifneq'
              'include'
              'override'
              'private'
              'sinclude'
              'undefine'
              'unexport'
              'vpath')
            TokenTypes = 36
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section'
        ConditionList = <
          item
            TokenTypes = 128
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#'
      '# file is generated by FPCMake'
      '[section]'
      '"Test str" ${Test}'
      ''
      'default: all'
      'UNIXs = linux $(BSDs) solaris qnx haiku aix'
      'FORCE:'
      '.PHONY: FORCE'
      'override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))'
      'ifneq ($(findstring darwin,$(OSTYPE)),)'
      'inUnix=1 #darwin'
      'SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))')
    TokenTypeNames.Strings = (
      'Value'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Param'
      'Number'
      'Section'
      'Label')
    Extentions = 
      '/makefile /makefile.gnu /makefile.gcc /makefile.bor /makefile.ms' +
      'c /makefile.vc /makefile.dm /makefile.bcc'
    LexerName = 'Makefile'
    Notes.Strings = (
      'Alex (Synwrite)'
      'Sample: makefile in Lazarus')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'constant'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^;.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 9
        Expression = '^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        Enabled = False
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Pre {#..}'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '\{\#.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Constant'
        StyleName = 'constant'
        TokenType = 8
        Expression = '\{.*?\}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '^\s*\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String with {var}'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '"       [\w\\\.\-\+\#\:\*\x20/\(\)<>]*? " |'#13#10'"       [\w\\\.\-\+' +
          '\#\:\*\x20/\(\)<>]*? (?=\{) |'#13#10'(?<=\}) [\w\\\.\-\+\#\:\*\x20/\(\' +
          ')<>]*? "'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keys'
        StyleName = 'Reserved word'
        NotParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'adminprivilegesrequired'
              'allowcancelduringinstall'
              'allownoicons'
              'allowrootdirectory'
              'allowuncpath'
              'alwayscreateuninstallicon'
              'alwaysrestart'
              'alwaysshowcomponentslist'
              'alwaysshowdironreadypage'
              'alwaysshowgrouponreadypage'
              'alwaysusepersonalgroup'
              'appcomments'
              'appcontact'
              'appcopyright'
              'appenddefaultdirname'
              'appenddefaultgroupname'
              'appid'
              'appmodifypath'
              'appmutex'
              'appname'
              'apppublisher'
              'apppublisherurl'
              'appreadmefile'
              'appsupporturl'
              'appupdatesurl'
              'appvername'
              'appversion'
              'attribs'
              'backcolor'
              'backcolor2'
              'backcolordirection'
              'backsolid'
              'changesassociations'
              'changesenvironment'
              'components'
              'compression'
              'createappdir'
              'createuninstallregkey'
              'defaultdirname'
              'defaultgroupname'
              'defaultuserinfoname'
              'defaultuserinfoorg'
              'defaultuserinfoserial'
              'description'
              'destdir'
              'destname'
              'direxistswarning'
              'disableappenddir'
              'disabledirpage'
              'disablefinishedpage'
              'disableprogramgrouppage'
              'disablereadymemo'
              'disablereadypage'
              'disablestartupprompt'
              'dontmergeduplicatefiles'
              'enabledirdoesntexistwarning'
              'excludes'
              'extradiskspacerequired'
              'filename'
              'flags'
              'flatcomponentslist'
              'groupdescription'
              'infoafterfile'
              'infobeforefile'
              'key'
              'languagedetectionmethod'
              'languages'
              'licensefile'
              'messagesfile'
              'minversion'
              'name'
              'onlybelowversion'
              'OutputBaseFilename'
              'outputdir'
              'password'
              'permissions'
              'privilegesrequired'
              'restartifneededbyrun'
              'root'
              'section'
              'setupiconfile'
              'showcomponentsizes'
              'showlanguagedialog'
              'showtaskstreelines'
              'solidcompression'
              'source'
              'string'
              'subkey'
              'tasks'
              'timestamprounding'
              'timestampsinutc'
              'touchdate'
              'touchtime'
              'type'
              'types'
              'uninstallable'
              'uninstalldisplayicon'
              'uninstalldisplayname'
              'uninstallfilesdir'
              'uninstalliconfile'
              'uninstalliconname'
              'uninstalllogmode'
              'uninstallrestartcomputer'
              'uninstallstyle'
              'updateuninstalllogappname'
              'usepreviousappdir'
              'usepreviousgroup'
              'useprevioussetuptype'
              'useprevioustasks'
              'useprevioususerinfo'
              'userinfopage'
              'valuedata'
              'valuename'
              'valuetype'
              'windowresizable'
              'windowshowcaption'
              'windowstartmaximized'
              'windowvisible'
              'wizardimagebackcolor'
              'wizardimagefile'
              'wizardimagestretch'
              'wizardsmallimagebackcolor'
              'wizardsmallimagefile'
              'wizardstyle')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Section end'
        EndOfTextClose = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Code'
        StartExpression = '(?i)\[code\]'#13#10
        EndExpression = '^\[\w+\]'
        SyntAnalyzer = SyntAnal20
        ToTextEnd = True
      end>
    SampleText.Strings = (
      '[Languages]'
      'Name: "english"; MessagesFile: "compiler:Default.isl"'
      'Name: "german"; MessagesFile: "compiler:Languages\German.isl"'
      ''
      '[Tasks]'
      
        'Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; Grou' +
        'pDescription: "{cm:AdditionalIcons}"'
      ';test'
      '[Files]'
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C#.acp"; DestDir: "{app}\' +
        'Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartrep' +
        'lace overwritereadonly uninsrestartdelete ignoreversion uninsrem' +
        'overeadonly '
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C++.acp"; DestDir: "{app}' +
        '\Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartre' +
        'place overwritereadonly uninsrestartdelete ignoreversion uninsre' +
        'movereadonly '
      ''
      '#sub AddIconFiles'
      '#expr GetFileVars'
      
        'Source: {#Copy (IconsMask, 0, RPos ("\", IconsMask)) + CurrentFi' +
        'leName}; DestDir: {app}; DestName: {#IconName}; Components: icon' +
        's\{#CurrentName}; Flags: ignoreversion'
      '#endsub '
      ''
      '[Code]'
      '  #ifdef Code'
      'function TT(a: Integer): Integer;'
      'begin'
      '  Result:= Ord('#39'Test'#39'[a]);'
      'end;'
      '  #endif'
      ''
      '[CustomMessages]'
      'ru.Msg=Ru'
      'ru.M2=Ru')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Constant'
      'Section'
      'Preprocessor')
    Extentions = 'iss'
    LexerName = 'Inno Setup'
    SkipSpaces = False
    Notes.Strings = (
      'Improved by Alex, uvviewsoft.com')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal57: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Identifier Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13266272
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Expression'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 33023
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        BorderTypeLeft = blSolid
        BorderTypeTop = blSolid
        BorderTypeRight = blSolid
        BorderTypeBottom = blSolid
      end
      item
        DisplayName = 'Test Style Main'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Test Style Sub'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clLime
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Marked Block - Range'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15925237
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree (Main, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1482313
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Regular, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1550414
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
        BorderTypeLeft = blSolid2
        BorderColorLeft = 4364526
      end
      item
        DisplayName = 'Alias'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 2086500
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Table'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 5
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 5
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 3'
        StyleName = 'String'
        TokenType = 5
        Expression = '`.*?(`|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment Ext'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol 2'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '!=|<>|\^=|<>|<=|>=|\(\+\)|\(\-\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '[/,\.;:\(\)=<>\+\-\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier'
        StyleName = 'Identifier'
        TokenType = 3
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Ext'
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)\[[\w\x20]*\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified'
        Enabled = False
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*(\.[a-z_]\w*){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Sub'
        Enabled = False
        StyleName = 'Test Style Sub'
        TokenType = 9
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Main'
        Enabled = False
        StyleName = 'Test Style Main'
        StrictParent = True
        TokenType = 8
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified Ext'
        Enabled = False
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)(\[[\w\x20]*\]|[a-z_]\c*)*(\.(\[[\w\x20]*\]|[a-z_]\c*)){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyword'
        StyleName = 'Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'all'
              'and'
              'any'
              'as'
              'between'
              'by'
              'concat'
              'distinct'
              'exists'
              'from'
              'full'
              'grant'
              'group'
              'having'
              'in'
              'index'
              'inner'
              'is'
              'join'
              'left'
              'like'
              'max'
              'min'
              'not'
              'null'
              'on'
              'option'
              'or'
              'order'
              'outer'
              'select'
              'some'
              'table'
              'union'
              'view'
              'where')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Expression'
        StyleName = 'Expression'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'case'
              'else'
              'end'
              'then'
              'when')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'avg'
              'bitand'
              'count'
              'date_format'
              'decode'
              'substr'
              'timediff'
              'userenv')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function Ex'
        StyleName = 'Function Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bitand'
              'decode'
              'userenv')
            TokenTypes = 8192
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Symbol Ext'
        StyleName = 'Symbol Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '(-)'
              '(+)')
            TokenTypes = 16
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Bracket Open'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Close'
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = 'subquery'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end SELECT'
        BlockName = 'section SELECT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section SELECT'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end WHERE'
        BlockName = 'section WHERE'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section WHERE'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table'
        StyleName = 'Table'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = '('
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        IgnoreAsParent = True
      end
      item
        DisplayName = 'section end FROM'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section FROM'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION END'
        BlockName = 'SECTION'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end
          item
            TokenTypes = 4095
          end>
        BlockOffset = 1
        BlockEnd = 'SECTION'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT END'
        BlockName = 'STATEMENT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Open'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'sub-section end ON'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from'
              'group'
              'having'
              'order'
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        DynSelectMin = True
        TreeItemStyle = 'Tree (Regular, Color)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT'
        StyleName = 'Marked Block - Range'
        ConditionList = <
          item
            TagList.Strings = (
              'select'
              'union')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'STATEMENT END'
        EndOfTextClose = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        TreeItemStyle = 'Tree (Main, Black)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section SELECT'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__SELECT__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section FROM'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__FROM__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'syb-section ON'
        BlockName = 'section FROM'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'on')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'sub-section end ON'
        DisplayInTree = False
        NameFmt = '__ON__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section WHERE'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__WHERE__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table or Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      
        'SELECT c.session , c.username ,TIMEDIFF(max(c.datetime) , min(c.' +
        'datetime))'
      
        'FROM  livehelp_domain_user a , livehelp_users b, livehelp_messag' +
        'es c'
      'WHERE a.id_domain = 29 AND'
      '      a.id_user = b.id AND'
      '      CONCAT( b.firstname, '#39' '#39',b.lastname)   = c.username AND'
      '      DATE_FORMAT(c.datetime,'#39'%m/%d/%Y'#39') ='#39'09/21/2006'#39' AND'
      '      (SELECT COUNT(data) from sometable where Fld = '#39'YES'#39') = 6 '
      'GROUP BY c.session'
      'ORDER BY c.session,c.username'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'KeyWord'
      'Identifier'
      'Symbol'
      'String'
      'Integer'
      'Float'
      'Table'
      'Field')
    Gramma.Gramma = 'Skip = <Comment>;'#13#10
    CurrentLineStyle = 'Current Line'
    Extentions = 'sql'
    LexerName = 'SQL'
    SkipSpaces = False
    RestartFromLineStart = True
    LineComment = '--'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal56: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
      end
      item
        DisplayName = 'Function background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clCream
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block bound'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Operator Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id_spec_then'
        StyleName = 'Reserved word'
        TokenType = 6
        Expression = 'then \x20* $'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id_spec_endif'
        StyleName = 'Reserved word'
        TokenType = 7
        Expression = '(?<=^\x20*) end \x20+ if \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+ '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '&H[\da-f]+&? |'#13#10'&o[0-7]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = #39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment in JSP'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$\{\}!@]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'catch'
              'chdir'
              'chdrive'
              'choose'
              'class'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'False'
              'filecopy'
              'finally'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'option'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'redim'
              'resume'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'True'
              'try'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Function separator'
        BlockName = 'Func'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func'
        StyleName = 'Function background'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Func end'
        Highlight = True
        NameFmt = '%s0 %s-1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s1 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dim'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'dim')
            TokenTypes = 4
            IgnoreCase = True
          end>
        NotCollapsed = True
        GroupFmt = 'Variables'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemImage = 4
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'OP Keywords'
        StyleName = 'Operator Keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'imports'
              'Inherits'
              'Overloads'
              'Overrides'
              'private'
              'property'
              'protected'
              'public')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin For'
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              'For')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'Exit')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = -1
        BlockEnd = 'End For'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = 'For...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End For'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Next')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'Resume')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = -1
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin do'
        ConditionList = <
          item
            TagList.Strings = (
              'do')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End do'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'Do...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End do'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin if'
        ConditionList = <
          item
            TokenTypes = 64
          end>
        BlockEnd = 'End if'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End if'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 128
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39'Test'
      #39'Test'
      ''
      'Function PrintNumber'
      '  Dim Number'
      '  Number = 12 + 12.2 + 1.2e3 + 1.2e-3'
      '  Response.Write "The number is " & number'
      '  '
      '  '#39'folded'
      '  If nnn Then'
      '    '#39'not folded'
      '    If True Then name '
      '  End If'
      '           '
      '  For I = 0 To Number'
      '    X = X + &hFF'
      '    X = X - &o7'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number'
      'Id_spec_Then'
      'Id_spec_EndIf')
    Extentions = 'vb vbs'
    LexerName = 'VBScript'
    Notes.Strings = (
      'Changed by Alex (SynWrite): '
      '- folded For-Next'
      '- folded If-EndIf, but only multi-line If'
      '- less token names'
      '- parser Octal nums')
    LineComment = #39
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id standard'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id jquery'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Comment doc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment doc'
        StyleName = 'Comment doc'
        TokenType = 1
        Expression = '(?s)/\*\* .*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment line'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#handle comment before </script>'#13#10'//.*? (?=<[/\w]) |'#13#10'//.* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)("|'#39') (\\\\|\\\1|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String ticks'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '` .*? (`|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = 
          '#before / must be some char'#13#10'(?<=[=\(&!]\s*) / (\\/|\\\\|.)*? (/' +
          '[gim]*|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) <r><!\[CDATA\[ .+? (\]\]></r> | \Z) '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_\$]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ (\.\d+)? e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'id keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'arguments'
              'as'
              'await'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'eval'
              'export'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'from'
              'function'
              'goto'
              'if'
              'implements'
              'import'
              'in'
              'instanceof'
              'int'
              'interface'
              'let'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'volatile'
              'while'
              'with'
              'yield')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'id standard'
        StyleName = 'Id standard'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Array'
              'Date'
              'hasOwnProperty'
              'Infinity'
              'isFinite'
              'isNaN'
              'isPrototypeOf'
              'length'
              'Math'
              'name'
              'NaN'
              'Number'
              'Object'
              'prototype'
              'String'
              'toString'
              'undefined'
              'valueOf')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'id jquery'
        StyleName = 'Id jquery'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '$'
              'add'
              'addBack'
              'addClass'
              'after'
              'ajax'
              'ajaxComplete'
              'ajaxError'
              'ajaxPrefilter'
              'ajaxSend'
              'ajaxSetup'
              'ajaxStart'
              'ajaxStop'
              'ajaxSuccess'
              'ajaxTransport'
              'altKey'
              'always'
              'andSelf'
              'animate'
              'animated'
              'append'
              'appendTo'
              'attr'
              'before'
              'bind'
              'blur'
              'bottom'
              'boxModel'
              'browser'
              'button'
              'callbacks'
              'cancelBubble'
              'change'
              'checkbox'
              'checked'
              'children'
              'clearQueue'
              'click'
              'clone'
              'closest'
              'contains'
              'contents'
              'context'
              'core'
              'css'
              'cssHooks'
              'cssNumber'
              'ctrlKey'
              'currentTarget'
              'data'
              'dblclick'
              'deferred'
              'delay'
              'delegate'
              'delegateTarget'
              'dequeue'
              'detach'
              'die'
              'disable'
              'disabled'
              'done'
              'each'
              'empty'
              'enabled'
              'end'
              'eq'
              'error'
              'even'
              'event'
              'extend'
              'fadeIn'
              'fadeOut'
              'fadeTo'
              'fadeToggle'
              'fail'
              'file'
              'filter'
              'find'
              'finish'
              'fire'
              'fired'
              'fireWith'
              'first'
              'first-child'
              'first-of-type'
              'fn'
              'focus'
              'focusin'
              'focusout'
              'fx'
              'get'
              'getJSON'
              'getScript'
              'globalEval'
              'grep'
              'gt'
              'has'
              'hasClass'
              'hasData'
              'header'
              'height'
              'hidden'
              'hide'
              'holdReady'
              'hover'
              'html'
              'image'
              'inArray'
              'index'
              'init'
              'innerHeight'
              'innerWidth'
              'input'
              'insertAfter'
              'insertBefore'
              'interval'
              'is'
              'isArray'
              'isDefaultPrevented'
              'isEmptyObject'
              'isFunction'
              'isImmediatePropagationStopped'
              'isNumeric'
              'isPlainObject'
              'isPropagationStopped'
              'isRejected'
              'isResolved'
              'isWindow'
              'isXMLDoc'
              'jquery'
              'keyCode'
              'keydown'
              'keypress'
              'keyup'
              'lang'
              'last'
              'last-child'
              'last-of-type'
              'length'
              'live'
              'load'
              'lock'
              'locked'
              'lt'
              'makeArray'
              'map'
              'merge'
              'metaKey'
              'mousedown'
              'mouseenter'
              'mouseleave'
              'mousemove'
              'mouseout'
              'mouseover'
              'mouseup'
              'namespace'
              'next'
              'nextAll'
              'nextUntil'
              'noConflict'
              'noop'
              'not'
              'notify'
              'notifyWith'
              'now'
              'nth-child'
              'nth-child-last'
              'nth-first-of-type'
              'nth-last-child'
              'nth-last-of-type'
              'nth-of-type'
              'obj'
              'odd'
              'off'
              'offset'
              'offsetParent'
              'on'
              'one'
              'only-child'
              'only-of-type'
              'outerHeight'
              'outerWidth'
              'pageX'
              'pageY'
              'param'
              'parent'
              'parents'
              'parentsUntil'
              'parseHTML'
              'parseInt'
              'parseJSON'
              'parseXML'
              'password'
              'pipe'
              'position'
              'post'
              'prepend'
              'prependTo'
              'prev'
              'prevAll'
              'preventDefault'
              'prevUntil'
              'progress'
              'promise'
              'prop'
              'proxy'
              'pushStack'
              'queue'
              'radio'
              'ready'
              'reject'
              'rejectWith'
              'relatedTarget'
              'remove'
              'removeAttr'
              'removeClass'
              'removeData'
              'removeProp'
              'replaceAll'
              'replaceWith'
              'reset'
              'resize'
              'resolve'
              'resolved'
              'resolveWith'
              'result'
              'root'
              'scroll'
              'scrollLeft'
              'scrollTop'
              'select'
              'selected'
              'selector'
              'self'
              'serialize'
              'serializeArray'
              'setTimeout'
              'shiftKey'
              'show'
              'siblings'
              'size'
              'slice'
              'slideDown'
              'slideToggle'
              'slideUp'
              'state'
              'stop'
              'stopImmediatePropagation'
              'stopPropagation'
              'sub'
              'submit'
              'support'
              'target'
              'text'
              'then'
              'timeStamp'
              'toArray'
              'toggle'
              'toggleClass'
              'top'
              'trigger'
              'triggerHandler'
              'trim'
              'type'
              'unbind'
              'undelegate'
              'unique'
              'unload'
              'unwrap'
              'val'
              'visible'
              'when'
              'which'
              'width'
              'window'
              'wrap'
              'wrapAll'
              'wrapInner')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for/if'
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'for'
              'if')
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'name: function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = 'function %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = 'function %s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        EndOfTextClose = True
        NameFmt = '%s0~s[)]'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s0~s[)]'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'var'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'var')
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '//Text'
      'NaN Object $ offset'
      '/** DocBlock '
      '*/   /* Comment */'
      'class MyClass {'
      '}'
      ''
      'function init() {'
      #9'addMenuItem('#39'Txt'#39', '#39'Ctrl+\'#39#39');'
      #9'addMenuItem('#39'Txt3'#39', '#39'Ctrl+Alt+;'#39');'
      '}'
      ''
      'var s_regex = /^<\/?\w.*?>/gi;'
      '    not_regex = 1 / 2 + (0xFF+10) / 3;'
      '    '
      'findNewEditPoint: function(inc, offset) {'
      #9'return -1'
      '}'
      '    '
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      '}'
      ''
      'function render(){'
      #9#9'$('#39'#basket'#39').html('#39#39');'
      #9#9'for (id in basket){'
      #9#9#9'if(basket[id].q>0){'
      #9#9#9#9'b=b+" \'
      #9#9#9#9#9'<div class='#39'"+cl+"'#39'> \'
      #9#9#9#9#9#9'<td width='#39'166'#39' valign='#39'top'#39'> \'
      #9#9#9#9#9#9#9'"+goods.n+'#39'"...'#39';'
      ''
      
        #9#9#9#9'$.cookie('#39'basketForPHP4'#39', $.toJSON(basketForPHP4),{path: '#39'/'#39 +
        '});'
      #9#9#9'} else{'
      #9#9#9#9'delete basket[id];'
      #9#9#9'}'
      #9#9'}'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number')
    Extentions = 'js'
    LexerName = 'JavaScript'
    Notes.Strings = (
      'Reworked by Alexey (Synwrite)'
      '-tree: added if/for/var'
      '-tree: func params shown'
      '-strings oneline '#39'...'#39
      '-strings multiline "..."'
      '-strings regex /.../gi'
      '-strings heredoc'
      '-doc comments'
      ''
      'Keywords: http://www.w3schools.com/js/js_reserved.asp')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer10: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Style'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Param correct'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Param incorrect'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clRed
      end
      item
        DisplayName = 'Value'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16053492
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Color'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'StyleSuffix'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Media block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = '{}'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String in URL'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?<=URL\s*\() .+? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param incorrect'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w\.-]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StyleSuffix'
        StyleName = 'StyleSuffix'
        BlockName = 'Style begin'
        NotParent = True
        TokenType = 2
        Expression = ':{1,2}\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '[;:,%\(\)\[\]@=/\*>\+!\^\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        BlockName = 'Style begin'
        TokenType = 6
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 7
        Expression = '-?\d*\.?\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w:\#\.\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Style'
        StyleName = 'Style'
        TokenType = 2
        Expression = '[\w\#\.\-\+]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Known props'
        StyleName = 'Param correct'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accelerator'
              'align-content'
              'align-items'
              'alignment-baseline'
              'align-self'
              'all'
              'animation'
              'animation-delay'
              'animation-direction'
              'animation-duration'
              'animation-fill-mode'
              'animation-iteration-count'
              'animation-name'
              'animation-play-state'
              'animation-timing-function'
              'azimuth'
              'backface-visibility'
              'background'
              'background-attachment'
              'background-blend-mode'
              'background-clip'
              'background-color'
              'background-image'
              'background-origin'
              'background-position'
              'background-position-x'
              'background-position-y'
              'background-repeat'
              'background-repeat-x'
              'background-repeat-y'
              'background-size'
              'baseline-shift'
              'behavior'
              'border'
              'border-bottom'
              'border-bottom-color'
              'border-bottom-left-radius'
              'border-bottom-right-radius'
              'border-bottom-style'
              'border-bottom-width'
              'border-collapse'
              'border-color'
              'border-image'
              'border-image-outset'
              'border-image-repeat'
              'border-image-slice'
              'border-image-source'
              'border-image-width'
              'border-left'
              'border-left-color'
              'border-left-style'
              'border-left-width'
              'border-radius'
              'border-right'
              'border-right-color'
              'border-right-style'
              'border-right-width'
              'border-spacing'
              'border-style'
              'border-top'
              'border-top-color'
              'border-top-left-radius'
              'border-top-right-radius'
              'border-top-style'
              'border-top-width'
              'border-width'
              'bottom'
              'box-decoration-break'
              'box-shadow'
              'box-sizing'
              'break-after'
              'break-before'
              'break-inside'
              'buffered-rendering'
              'caption-side'
              'clear'
              'clip'
              'clip-path'
              'clip-rule'
              'color'
              'color-interpolation'
              'color-interpolation-filters'
              'color-rendering'
              'column-count'
              'column-fill'
              'column-gap'
              'column-rule'
              'column-rule-color'
              'column-rule-style'
              'column-rule-width'
              'columns'
              'column-span'
              'column-width'
              'content'
              'counter-increment'
              'counter-reset'
              'css-float'
              'css-text'
              'cue'
              'cue-after'
              'cue-before'
              'cursor'
              'cx'
              'cy'
              'data'
              'direction'
              'display'
              'dominant-baseline'
              'elevation'
              'empty-cells'
              'enable-background'
              'fill'
              'fill-opacity'
              'fill-rule'
              'filter'
              'flex'
              'flex-basis'
              'flex-direction'
              'flex-flow'
              'flex-grow'
              'flex-shrink'
              'flex-wrap'
              'float'
              'flood-color'
              'flood-opacity'
              'font'
              'font-family'
              'font-feature-settings'
              'font-kerning'
              'font-language-override'
              'font-size'
              'font-size-adjust'
              'font-stretch'
              'font-style'
              'font-synthesis'
              'font-variant'
              'font-variant-alternates'
              'font-variant-caps'
              'font-variant-east-asian'
              'font-variant-ligatures'
              'font-variant-numeric'
              'font-variant-position'
              'font-weight'
              'get-attribute'
              'get-property-cs-svalue'
              'get-property-priority'
              'get-property-value'
              'glyph-orientation-horizontal'
              'glyph-orientation-vertical'
              'height'
              'image-orientation'
              'image-rendering'
              'ime-mode'
              'isolation'
              'item'
              'justify-content'
              'kerning'
              'layout-flow'
              'layout-grid'
              'layout-grid-char'
              'layout-grid-line'
              'layout-grid-mode'
              'layout-grid-type'
              'left'
              'length'
              'letter-spacing'
              'lighting-color'
              'line-break'
              'line-height'
              'list-style'
              'list-style-image'
              'list-style-position'
              'list-style-type'
              'margin'
              'margin-bottom'
              'margin-left'
              'margin-right'
              'margin-top'
              'marker'
              'marker-end'
              'marker-mid'
              'marker-offset'
              'marker-start'
              'marks'
              'mask'
              'mask-type'
              'max-height'
              'max-width'
              'max-zoom'
              'min-height'
              'min-width'
              'min-zoom'
              'mix-blend-mode'
              'nav-down'
              'nav-left'
              'nav-right'
              'nav-up'
              'object-fit'
              'object-position'
              'opacity'
              'order'
              'orientation'
              'orphans'
              'outline'
              'outline-color'
              'outline-offset'
              'outline-style'
              'outline-width'
              'overflow'
              'overflow-wrap'
              'overflow-x'
              'overflow-y'
              'padding'
              'padding-bottom'
              'padding-left'
              'padding-right'
              'padding-top'
              'page'
              'page-break-after'
              'page-break-before'
              'page-break-inside'
              'paint-order'
              'parent-rule'
              'pause'
              'pause-after'
              'pause-before'
              'perspective'
              'perspective-origin'
              'pitch'
              'pitch-range'
              'pixel-bottom'
              'pixel-height'
              'pixel-left'
              'pixel-right'
              'pixel-top'
              'pixel-width'
              'play-during'
              'pointer-events'
              'pos-bottom'
              'pos-height'
              'position'
              'pos-left'
              'pos-right'
              'pos-top'
              'pos-width'
              'quotes'
              'r'
              'remove-attribute'
              'remove-property'
              'resize'
              'richness'
              'right'
              'ruby-align'
              'ruby-overhang'
              'ruby-position'
              'rx'
              'ry'
              'scrollbar3d-light-color'
              'scrollbar-arrow-color'
              'scrollbar-base-color'
              'scrollbar-dark-shadow-color'
              'scrollbar-face-color'
              'scrollbar-highlight-color'
              'scrollbar-shadow-color'
              'scrollbar-track-color'
              'scroll-behavior'
              'set-attribute'
              'set-property'
              'shape-image-threshold'
              'shape-margin'
              'shape-outside'
              'shape-rendering'
              'size'
              'speak'
              'speak-header'
              'speak-numeral'
              'speak-punctuation'
              'speech-rate'
              'src'
              'stop-color'
              'stop-opacity'
              'stress'
              'stroke'
              'stroke-dasharray'
              'stroke-dashoffset'
              'stroke-linecap'
              'stroke-linejoin'
              'stroke-miterlimit'
              'stroke-opacity'
              'stroke-width'
              'style-float'
              'table-layout'
              'tab-size'
              'text-align'
              'text-align-last'
              'text-anchor'
              'text-autospace'
              'text-decoration'
              'text-decoration-blink'
              'text-decoration-color'
              'text-decoration-line'
              'text-decoration-line-through'
              'text-decoration-none'
              'text-decoration-overline'
              'text-decoration-style'
              'text-decoration-underline'
              'text-indent'
              'text-justify'
              'text-justify-trim'
              'text-kashida'
              'text-kashida-space'
              'text-overflow'
              'text-rendering'
              'text-shadow'
              'text-transform'
              'text-underline-position'
              'top'
              'touch-action'
              'transform'
              'transform-origin'
              'transform-style'
              'transition'
              'transition-delay'
              'transition-duration'
              'transition-property'
              'transition-timing-function'
              'unicode-bidi'
              'unicode-range'
              'user-select'
              'user-zoom'
              'vector-effect'
              'vertical-align'
              'visibility'
              'voice-family'
              'volume'
              'white-space'
              'widows'
              'width'
              'will-change'
              'word-break'
              'word-spacing'
              'word-wrap'
              'writing-mode'
              'x'
              'y'
              'z-index'
              'zoom')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Known vendor prefixes'
        StyleName = 'Param correct'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '-apple-dashboard-region'
              '-epub-caption-side'
              '-epub-hyphens'
              '-epub-text-combine'
              '-epub-text-emphasis'
              '-epub-text-emphasis-color'
              '-epub-text-emphasis-style'
              '-epub-text-orientation'
              '-epub-text-transform'
              '-epub-word-break'
              '-epub-writing-mode'
              '-khtml-user-select'
              '-moz-animation'
              '-moz-appearance'
              '-moz-background-inline-policy'
              '-moz-binding'
              '-moz-border-bottom-colors'
              '-moz-border-end'
              '-moz-border-end-color'
              '-moz-border-end-style'
              '-moz-border-end-width'
              '-moz-border-left-colors'
              '-moz-border-radius'
              '-moz-border-right-colors'
              '-moz-border-start'
              '-moz-border-start-color'
              '-moz-border-start-style'
              '-moz-border-start-width'
              '-moz-border-top-colors'
              '-moz-box-align'
              '-moz-box-direction'
              '-moz-box-flex'
              '-moz-box-ordinal-group'
              '-moz-box-orient'
              '-moz-box-pack'
              '-moz-box-shadow'
              '-moz-box-sizing'
              '-moz-column-count'
              '-moz-column-fill'
              '-moz-column-gap'
              '-moz-column-rule'
              '-moz-column-rule-color'
              '-moz-column-rule-style'
              '-moz-column-rule-width'
              '-moz-columns'
              '-moz-column-width'
              '-moz-float-edge'
              '-moz-font-feature-settings'
              '-moz-font-language-override'
              '-moz-force-broken-image-icon'
              '-moz-hyphens'
              '-moz-image-region'
              '-moz-margin-end'
              '-moz-margin-start'
              '-moz-orient'
              '-moz-outline-radius'
              '-moz-outline-radius-bottomleft'
              '-moz-outline-radius-bottomright'
              '-moz-outline-radius-topleft'
              '-moz-outline-radius-topright'
              '-moz-padding-end'
              '-moz-padding-start'
              '-moz-perspective'
              '-moz-script-level'
              '-moz-script-min-size'
              '-moz-script-size-multiplier'
              '-moz-stack-sizing'
              '-moz-tab-size'
              '-moz-text-align-last'
              '-moz-text-blink'
              '-moz-text-decoration-color'
              '-moz-text-decoration-line'
              '-moz-text-decoration-style'
              '-moz-text-size-adjust'
              '-moz-transform'
              '-moz-transition'
              '-moz-transition-delay'
              '-moz-user-focus'
              '-moz-user-input'
              '-moz-user-modify'
              '-moz-user-select'
              '-moz-window-shadow'
              '-ms-accelerator'
              '-ms-animation'
              '-ms-animation-delay'
              '-ms-animation-direction'
              '-ms-animation-duration'
              '-ms-animation-fill-mode'
              '-ms-animation-iteration-count'
              '-ms-animation-name'
              '-ms-animation-play-state'
              '-ms-animation-timing-function'
              '-ms-backface-visibility'
              '-ms-background-position-x'
              '-ms-background-position-y'
              '-ms-behavior'
              '-ms-block-progression'
              '-ms-content-zoom-chaining'
              '-ms-content-zooming'
              '-ms-content-zoom-limit'
              '-ms-content-zoom-limit-max'
              '-ms-content-zoom-limit-min'
              '-ms-content-zoom-snap'
              '-ms-content-zoom-snap-points'
              '-ms-content-zoom-snap-type'
              '-ms-filter'
              '-ms-flex'
              '-ms-flex-align'
              '-ms-flex-direction'
              '-ms-flex-flow'
              '-ms-flex-item-align'
              '-ms-flex-line-pack'
              '-ms-flex-negative'
              '-ms-flex-order'
              '-ms-flex-pack'
              '-ms-flex-positive'
              '-ms-flex-preferred-size'
              '-ms-flex-wrap'
              '-ms-flow-from'
              '-ms-flow-into'
              '-ms-font-feature-settings'
              '-ms-grid-column'
              '-ms-grid-column-align'
              '-ms-grid-columns'
              '-ms-grid-column-span'
              '-ms-grid-row'
              '-ms-grid-row-align'
              '-ms-grid-rows'
              '-ms-grid-row-span'
              '-ms-high-contrast-adjust'
              '-ms-hyphenate-limit-chars'
              '-ms-hyphenate-limit-lines'
              '-ms-hyphenate-limit-zone'
              '-ms-hyphens'
              '-ms-ime-align'
              '-ms-ime-mode'
              '-ms-interpolation-mode'
              '-ms-layout-flow'
              '-ms-layout-grid'
              '-ms-layout-grid-char'
              '-ms-layout-grid-line'
              '-ms-layout-grid-mode'
              '-ms-layout-grid-type'
              '-ms-overflow-style'
              '-ms-overflow-x'
              '-ms-overflow-y'
              '-ms-perspective'
              '-ms-perspective-origin'
              '-ms-progress-appearance'
              '-ms-scrollbar-arrow-color'
              '-ms-scrollbar-base-color'
              '-ms-scrollbar-darkshadow-color'
              '-ms-scrollbar-face-color'
              '-ms-scrollbar-highlight-color'
              '-ms-scrollbar-shadow-color'
              '-ms-scrollbar-track-color'
              '-ms-scroll-chaining'
              '-ms-scroll-limit'
              '-ms-scroll-limit-xmax'
              '-ms-scroll-limit-x-max'
              '-ms-scroll-limit-xmin'
              '-ms-scroll-limit-x-min'
              '-ms-scroll-limit-ymax'
              '-ms-scroll-limit-y-max'
              '-ms-scroll-limit-ymin'
              '-ms-scroll-limit-y-min'
              '-ms-scroll-rails'
              '-ms-scroll-snap-points-x'
              '-ms-scroll-snap-points-y'
              '-ms-scroll-snap-type'
              '-ms-scroll-snap-x'
              '-ms-scroll-snap-y'
              '-ms-scroll-translation'
              '-ms-text-align-last'
              '-ms-text-autospace'
              '-ms-text-combine-horizontal'
              '-ms-text-justify'
              '-ms-text-kashida-space'
              '-ms-text-overflow'
              '-ms-text-size-adjust'
              '-ms-text-underline-position'
              '-ms-touch-action'
              '-ms-touch-select'
              '-ms-transform'
              '-ms-transform-origin'
              '-ms-transform-style'
              '-ms-transition'
              '-ms-transition-delay'
              '-ms-transition-duration'
              '-ms-transition-property'
              '-ms-transition-timing-function'
              '-ms-user-select'
              '-ms-word-break'
              '-ms-word-wrap'
              '-ms-wrap-flow'
              '-ms-wrap-margin'
              '-ms-wrap-through'
              '-ms-writing-mode'
              '-ms-zoom'
              '-o-border-image'
              '-o-device-pixel-ratio'
              '-o-focus-opacity'
              '-o-link'
              '-o-link-source'
              '-o-mini-fold'
              '-o-object-fit'
              '-o-object-position'
              '-o-table-baseline'
              '-o-tab-size'
              '-o-transform'
              '-o-transform-origin'
              '-o-transition'
              '-o-transition-delay'
              '-o-transition-duration'
              '-o-transition-property'
              '-o-transition-timing-function'
              '-o-user-select'
              '-pie-background'
              '-wap-accesskey'
              '-wap-input-format'
              '-wap-input-required'
              '-wap-marquee-dir'
              '-wap-marquee-loop'
              '-wap-marquee-speed'
              '-wap-marquee-style'
              '-webkit-align-content'
              '-webkit-align-items'
              '-webkit-align-self'
              '-webkit-animation'
              '-webkit-animation-delay'
              '-webkit-animation-direction'
              '-webkit-animation-duration'
              '-webkit-animation-fill-mode'
              '-webkit-animation-iteration-count'
              '-webkit-animation-name'
              '-webkit-animation-play-state'
              '-webkit-animation-timing-function'
              '-webkit-appearance'
              '-webkit-app-region'
              '-webkit-aspect-ratio'
              '-webkit-backface-visibility'
              '-webkit-background-blend-mode'
              '-webkit-background-clip'
              '-webkit-background-composite'
              '-webkit-background-origin'
              '-webkit-background-size'
              '-webkit-blend-mode'
              '-webkit-border-after'
              '-webkit-border-after-color'
              '-webkit-border-after-style'
              '-webkit-border-after-width'
              '-webkit-border-before'
              '-webkit-border-before-color'
              '-webkit-border-before-style'
              '-webkit-border-before-width'
              '-webkit-border-bottom-left-radius'
              '-webkit-border-bottom-right-radius'
              '-webkit-border-end'
              '-webkit-border-end-color'
              '-webkit-border-end-style'
              '-webkit-border-end-width'
              '-webkit-border-fit'
              '-webkit-border-horizontal-spacing'
              '-webkit-border-image'
              '-webkit-border-radius'
              '-webkit-border-start'
              '-webkit-border-start-color'
              '-webkit-border-start-style'
              '-webkit-border-start-width'
              '-webkit-border-top-left-radius'
              '-webkit-border-top-right-radius'
              '-webkit-border-vertical-spacing'
              '-webkit-box-align'
              '-webkit-box-decoration-break'
              '-webkit-box-direction'
              '-webkit-box-flex'
              '-webkit-box-flex-group'
              '-webkit-box-lines'
              '-webkit-box-ordinal-group'
              '-webkit-box-orient'
              '-webkit-box-pack'
              '-webkit-box-reflect'
              '-webkit-box-shadow'
              '-webkit-box-sizing'
              '-webkit-clip-path'
              '-webkit-color-correction'
              '-webkit-column-axis'
              '-webkit-column-break-after'
              '-webkit-column-break-before'
              '-webkit-column-break-inside'
              '-webkit-column-count'
              '-webkit-column-gap'
              '-webkit-column-progression'
              '-webkit-column-rule'
              '-webkit-column-rule-color'
              '-webkit-column-rule-style'
              '-webkit-column-rule-width'
              '-webkit-columns'
              '-webkit-column-span'
              '-webkit-column-width'
              '-webkit-cursor-visibility'
              '-webkit-dashboard-region'
              '-webkit-filter'
              '-webkit-flex'
              '-webkit-flex-basis'
              '-webkit-flex-direction'
              '-webkit-flex-flow'
              '-webkit-flex-grow'
              '-webkit-flex-shrink'
              '-webkit-flex-wrap'
              '-webkit-flow-from'
              '-webkit-flow-into'
              '-webkit-font-feature-settings'
              '-webkit-font-kerning'
              '-webkit-font-size-delta'
              '-webkit-font-smoothing'
              '-webkit-font-variant-ligatures'
              '-webkit-grid-after'
              '-webkit-grid-auto-columns'
              '-webkit-grid-auto-flow'
              '-webkit-grid-auto-rows'
              '-webkit-grid-before'
              '-webkit-grid-column'
              '-webkit-grid-columns'
              '-webkit-grid-end'
              '-webkit-grid-row'
              '-webkit-grid-rows'
              '-webkit-grid-start'
              '-webkit-highlight'
              '-webkit-hyphenate-character'
              '-webkit-hyphenate-limit-after'
              '-webkit-hyphenate-limit-before'
              '-webkit-hyphenate-limit-lines'
              '-webkit-justify-content'
              '-webkit-line-align'
              '-webkit-line-box-contain'
              '-webkit-line-break'
              '-webkit-line-clamp'
              '-webkit-line-grid'
              '-webkit-line-snap'
              '-webkit-locale'
              '-webkit-logical-height'
              '-webkit-logical-width'
              '-webkit-margin-after'
              '-webkit-margin-after-collapse'
              '-webkit-margin-before'
              '-webkit-margin-before-collapse'
              '-webkit-margin-bottom-collapse'
              '-webkit-margin-collapse'
              '-webkit-margin-end'
              '-webkit-margin-start'
              '-webkit-margin-top-collapse'
              '-webkit-marquee'
              '-webkit-marquee-direction'
              '-webkit-marquee-increment'
              '-webkit-marquee-repetition'
              '-webkit-marquee-speed'
              '-webkit-marquee-style'
              '-webkit-mask'
              '-webkit-mask-box-image'
              '-webkit-mask-box-image-outset'
              '-webkit-mask-box-image-repeat'
              '-webkit-mask-box-image-slice'
              '-webkit-mask-box-image-source'
              '-webkit-mask-box-image-width'
              '-webkit-mask-clip'
              '-webkit-mask-composite'
              '-webkit-mask-image'
              '-webkit-mask-origin'
              '-webkit-mask-position'
              '-webkit-mask-position-x'
              '-webkit-mask-position-y'
              '-webkit-mask-repeat'
              '-webkit-mask-repeat-x'
              '-webkit-mask-repeat-y'
              '-webkit-mask-size'
              '-webkit-max-logical-height'
              '-webkit-max-logical-width'
              '-webkit-min-logical-height'
              '-webkit-min-logical-width'
              '-webkit-nbsp-mode'
              '-webkit-opacity'
              '-webkit-order'
              '-webkit-overflow-scrolling'
              '-webkit-padding-after'
              '-webkit-padding-before'
              '-webkit-padding-end'
              '-webkit-padding-start'
              '-webkit-perspective'
              '-webkit-perspective-origin'
              '-webkit-perspective-origin-x'
              '-webkit-perspective-origin-y'
              '-webkit-print-color-adjust'
              '-webkit-region-break-after'
              '-webkit-region-break-before'
              '-webkit-region-break-inside'
              '-webkit-region-overflow'
              '-webkit-rtl-ordering'
              '-webkit-ruby-position'
              '-webkit-shape-inside'
              '-webkit-shape-margin'
              '-webkit-shape-outside'
              '-webkit-shape-padding'
              '-webkit-svg-shadow'
              '-webkit-tap-highlight-color'
              '-webkit-text-align-last'
              '-webkit-text-combine'
              '-webkit-text-decoration-color'
              '-webkit-text-decoration-line'
              '-webkit-text-decorations-in-effect'
              '-webkit-text-decoration-style'
              '-webkit-text-emphasis-color'
              '-webkit-text-emphasis-position'
              '-webkit-text-emphasis-style'
              '-webkit-text-fill-color'
              '-webkit-text-orientation'
              '-webkit-text-security'
              '-webkit-text-size-adjust'
              '-webkit-text-stroke'
              '-webkit-text-stroke-color'
              '-webkit-text-stroke-width'
              '-webkit-text-underline-position'
              '-webkit-touch-callout'
              '-webkit-transform'
              '-webkit-transform-origin'
              '-webkit-transform-origin-x'
              '-webkit-transform-origin-y'
              '-webkit-transform-origin-z'
              '-webkit-transform-style'
              '-webkit-transition'
              '-webkit-transition-delay'
              '-webkit-transition-duration'
              '-webkit-transition-property'
              '-webkit-transition-timing-function'
              '-webkit-user-drag'
              '-webkit-user-modify'
              '-webkit-user-select'
              '-webkit-wrap'
              '-webkit-wrap-flow'
              '-webkit-wrap-through'
              '-webkit-writing-mode'
              '-xv-interpret-as'
              '-xv-phonemes'
              '-xv-voice-balance'
              '-xv-voice-duration'
              '-xv-voice-pitch'
              '-xv-voice-pitch-range'
              '-xv-voice-rate'
              '-xv-voice-stress'
              '-xv-voice-volume')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Media begin'
        StyleName = 'Media block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 246
          end
          item
            TagList.Strings = (
              '@')
            TokenTypes = 32
          end>
        BlockEnd = 'Style end'
        DisplayInTree = False
        NameFmt = '@media'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = '@{...}'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Style begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Style end'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl1'
        GroupFmt = '\Styles'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'#13#10
      end
      item
        DisplayName = 'Style end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param to tree'
        BlockName = 'Style begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 544
          end
          item
            TagList.Strings = (
              'http')
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 40
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Colors'
        ConditionList = <
          item
            TokenTypes = 64
          end>
        GroupFmt = '\Colors'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Images'
        BlockName = 'Style begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 32
          end
          item
            TagList.Strings = (
              'url')
          end>
        BlockEnd = 'Images end'
        NameFmt = '%s-1~s[)]1'
        GroupFmt = '\Images'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Images end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Comment */'
      '.name, .name2 { '
      '  font-size: 18pt; '
      '  color: #000099;'
      '  width: 100%; '
      '  background: url("../img.gif") no-repeat;'
      '  back2: url(http://www.com/url);'
      '  back3: url(../img.gif);'
      '  -ms-zoom: 100%; '
      '  -ms-hmm: test;'
      '}'
      ''
      '#footer {color: #AA00BB;}'
      ''
      
        '@media screen and (-ms-high-contrast: active), (-ms-high-contras' +
        't: none) {'
      '    .input_size_m .input__control {'
      '        padding-left: 0;'
      '        border-left: 10px solid transparent'
      '   }'
      '}'
      ''
      '.button_size_m {'
      '    font-size: 15px'
      '}'
      ''
      '@media all and (min-width: 0) {'
      '    .button_size_m {'
      '        line-height: 32px'
      '   }'
      '}'
      ''
      '.button_size_m .button__text {'
      '    padding: 0 15px'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Delimiter'
      'Color'
      'Number')
    Extentions = 'css'
    LexerName = 'CSS'
    Notes.Strings = (
      'Author: Alex (Synwrite)'
      'Added misspelled properties underlining'
      'Added @media handling'
      ''
      'Known properties: http://htmlbook.ru'
      
        'Known vendor prefixes: http://peter.sh/experiments/vendor-prefix' +
        'ed-css-property-overview/')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744576
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag val'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'CDATA bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSilver
      end
      item
        DisplayName = 'CDATA text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Error content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Current tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14540253
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current tag id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'DTD element type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'DTD bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Spec char'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'XML header'
        StyleName = 'Comment'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment ?xml'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '<\?xml\s.*?\?>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA bound'
        TokenType = 11
        Expression = '<!\[CDATA\['#13#10'#(?s)<!\[CDATA\[.*?(\]\]>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA Text'
        StyleName = 'CDATA text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag val'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'#39').*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error content'
        StyleName = 'Error content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&char'
        StyleName = 'Spec char'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'CDATA text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DTD element start'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = '< %s0 %s-1 >'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpBound
        CollapseFmt = 'Document structure'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag id'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current tag id'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = '</%s0>'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/>')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CDATA begin'
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = 'CDATA'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag val'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      '  <!ELEMENT web-app (icon?, display-name?, ejb-local-ref*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      ']>'
      ''
      '<![CDATA['
      'Included text '
      ']]>'
      'Text &spec; text'
      ''
      '<web-app>'
      '    <display-name abc="123" def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '    </filter-mapping>'
      '</web-app>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'XML header'
      'Attrib. value'
      'CDATA end')
    Extentions = 
      'xml xsl xslt mmpa mmpr sti bdsproj xsd rss wml svg xul xsd axl r' +
      'df xaml vcproj dproj plist storyboard msc csproj manifest lpi lp' +
      'k sublime-snippet tmLanguage jsproj appxmanifest'
    LexerName = 'XML'
    Charset = DEFAULT_CHARSET
    Left = 140
    Top = 160
  end
  object SyntAnal76: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Parameter'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Value'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^[;\#].*$'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 5
        Expression = '^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Key'
        StyleName = 'Parameter'
        TokenType = 2
        Expression = '^[^=\n\r]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        TokenType = 4
        Expression = '.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Section'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        EndOfTextClose = True
        NameFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        SelfClose = True
        TreeItemStyle = 'Section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Item'
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '[TT]'
      'aa=test'
      'bb=test'
      ''
      '[TT2]'
      ';tt=2'
      'ww=22')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Key'
      'Symbol'
      'Value'
      'Section')
    Extentions = 'ini dsk dti dof inf lng srv reg sas cfg'
    LexerName = 'Ini files'
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal82: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'QuotationMarks'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\s*@?\s* rem\b .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\:\:.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 3
        Expression = '^\s*:\w+|(?<=goto\s+)\S+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '%\d | %\w+(%|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IP-Address'
        StyleName = 'Int'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 2
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo(\soff)?\b'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echo text'
        Enabled = False
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^<>\|\n]*[\n]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'QuotationMarks'
        StyleName = 'QuotationMarks'
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Arp'
              'Assoc'
              'At'
              'Atmadm'
              'Attrib'
              'Bootcfg'
              'Break'
              'Cacls'
              'call'
              'cd'
              'Change'
              'Chcp'
              'Chdir'
              'Chkdsk'
              'Chkntfs'
              'choice'
              'Cipher'
              'cls'
              'Cmd'
              'Cmstp'
              'Color'
              'Comp'
              'Compact'
              'Convert'
              'copy'
              'Cprofile'
              'CScript'
              'Date'
              'defined'
              'Defrag'
              'del'
              'Dir'
              'Diskcomp'
              'Diskcopy'
              'DiskPart'
              'do'
              'Doskey'
              'Driverquery'
              'echo'
              'echo.'
              'else'
              'Endlocal'
              'errorlevel'
              'Eventcreate'
              'Eventquery'
              'Eventtriggers'
              'Evntcmd'
              'exist'
              'Exit'
              'Expand'
              'Fc'
              'Find'
              'Findstr'
              'Finger'
              'Flattemp'
              'for'
              'Format'
              'Fsutil'
              'Ftp'
              'Ftype'
              'Getmac'
              'goto'
              'Gpresult'
              'Gpupdate'
              'Graftabl'
              'Help'
              'Helpctr'
              'Hostname'
              'if'
              'in'
              'Ipconfig'
              'Ipseccmd'
              'Ipxroute'
              'Irftp'
              'Label'
              'Lodctr'
              'Logman'
              'Lpq'
              'Lpr'
              'Macfile'
              'md'
              'Mkdir'
              'Mmc'
              'Mode'
              'More'
              'Mountvol'
              'Move'
              'MS-DOS'
              'Msiexec'
              'Msinfo32'
              'Nbtstat'
              'Net'
              'Netsh'
              'Netstat'
              'not'
              'Nslookup'
              'Ntbackup'
              'Ntcmdprompt'
              'Ntsd'
              'OOpenfiles'
              'Pagefileconfig'
              'Path'
              'Pathping'
              'pause'
              'Pbadmin'
              'Pentnt'
              'Perfmon'
              'Ping'
              'Popd'
              'Print'
              'Prncnfg'
              'Prndrvr'
              'Prnjobs'
              'Prnmngr'
              'Prnport'
              'Prnqctl'
              'Prompt'
              'Pushd'
              'Query'
              'Rcp'
              'Recover'
              'Reg'
              'Regsvr32'
              'Relog'
              'Rem'
              'Ren'
              'Rename'
              'Replace'
              'Resetsession'
              'Rexec'
              'Rmdir'
              'Route'
              'RRasdial'
              'Rsh'
              'Rsm'
              'Runas'
              'SC'
              'Schtasks'
              'Secedit'
              'set'
              'Setlocal'
              'Sfc'
              'shift'
              'Shutdown'
              'Sort'
              'Start'
              'Subst'
              'sys'
              'Systeminfo'
              'Taskkill'
              'Tasklist'
              'Tcmsetup'
              'TCP/IP'
              'Telnet'
              'Tftp'
              'Time'
              'Title'
              'Tracerpt'
              'Tracert'
              'Tree'
              'Type'
              'Typeperf'
              'Unlodctr'
              'Verify'
              'Vol'
              'Vssadmin'
              'VVer'
              'W32tm'
              'Winnt'
              'Winnt32'
              'WMIC'
              'Xcopy')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'rem Batch file'
      '@echo off'
      'echo Params: %1 %2 %3'
      '@rem'
      '  @rem Comment'
      ':label'
      '::comment'
      'pause'
      'copy c:\%dirname%\*.pas "d:\dir name"'
      'if errorlevel 1 echo Error in copy action!'
      'goto label'
      'ping 10.10.10.100 ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd')
    Extentions = 'bat cmd'
    LexerName = 'Batch files'
    SkipSpaces = False
    Notes.Strings = (
      'Changes: Alexey (SynWrite)')
    RestartFromLineStart = True
    LineComment = 'rem '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal46: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'empty line'
        Expression = '^\s*\z'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'not empty line'
        TokenType = 1
        Expression = '^.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Paragraph'
        BlockName = 'Paragraph'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Paragraph end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Paragraph end'
        BlockName = 'Paragraph'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'bbb'
      'bb'
      'bb'
      ''
      'bbb'
      'bb'
      ''
      'bbb'
      'bb')
    TokenTypeNames.Strings = (
      'Empty'
      'Line')
    Extentions = 'txt'
    LexerName = 'Text files'
    SkipSpaces = False
    FullRefreshSize = 10000
    Notes.Strings = (
      'Reworked by Alexey (SynWrite)')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal15: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        Expression = '\$\{.+?\} |'#13#10'\$\(.+?\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id Param'
        StyleName = 'Id Param'
        TokenType = 5
        Expression = '#first word in line, before space'#13#10'^\w+(?=\s)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '\#?\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%\|\&\\~]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#Text'
      '#Text'
      '#Text'
      'Name1="Text"'
      'Name2=${var}/$(dir)/text.txt')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Id Param')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'properties /hosts po'
    LexerName = 'Properties'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      '+ ${var}, $(var) hilight'
      '+ comments hilight'
      '+ support for #aabbcc color codes'
      '+ tree (tested on squid.conf)')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal58: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String here-doc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Quote block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)=begin.*?=end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\# (?!\{) .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)"(\\"|.)*?("|(?<!\\)$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '/(\\/|.)*?(/)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String regex2'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '%r\{.*?(\})'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String HereDoc'
        StyleName = 'String here-doc'
        TokenType = 4
        Expression = '(?s) \<\<[`"]? (\w+) [`"]? .*? ^\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IfBegin'
        StyleName = 'Id keyword'
        TokenType = 6
        Expression = '^[\x20\x09]* (if|unless|while)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\+\-\*\/\?\!=\.\<\>%\|:~\#&]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - predefined'
        StyleName = 'Variable'
        Expression = 
          '\$([!$&"'#39'*+,./0:;<=>?@\`~1-9]| -[0FIKadilpvw]| (deferr|defout|st' +
          'derr|stdin|stdout| DEBUG|FILENAME|KCODE|LOADED_FEATURES|LOAD_PAT' +
          'H| PROGRAM_NAME|SAFE|VERBOSE)\b)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable global'
        StyleName = 'Variable'
        Expression = '\$[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - instance'
        StyleName = 'Variable'
        Expression = '@[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - class'
        StyleName = 'Variable'
        Expression = '@@[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__FILE__'
              '__LINE__'
              'alias'
              'and'
              'begin'
              'BEGIN'
              'break'
              'case'
              'class'
              'def'
              'defined'
              'do'
              'else'
              'elsif'
              'end'
              'END'
              'ensure'
              'false'
              'for'
              'if'
              'in'
              'module'
              'next'
              'nil'
              'not'
              'or'
              'raise'
              'redo'
              'require'
              'rescue'
              'retry'
              'return'
              'self'
              'super'
              'then'
              'true'
              'undef'
              'unless'
              'until'
              'when'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'comments-start'
        StyleName = 'Comment'
        ConditionList = <
          item
            TagList.Strings = (
              '=begin')
            IgnoreCase = True
          end>
        BlockEnd = 'comments-end'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'comments-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '=end')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'do'
              'for'
              'module'
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        NameFmt = '%s0 ...'
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_def'
        ConditionList = <
          item
            TagList.Strings = (
              'def')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_if'
        ConditionList = <
          item
            TokenTypes = 576
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        NameFmt = '%sz0'
        HighlightPos = cpAny
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'q{'
        StyleName = 'Quote block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'q')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '%')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#commment'
      'require '#39'name.rb'#39
      '=begin'
      ' multiline comment'
      '=end'
      ''
      '%q{ '
      '  test name{name}'
      '}'
      ''
      'name = /^name/ =~ %r{\w+}'
      'name = "Name \'
      '  End" #trailing \'
      ''
      'def create'
      '  @unit = opt["Opt"]'
      '  @scale = 1 if @unit == 0 #must not fold'
      '  @scale = 2 if @unit == 1 #same'
      'end    '
      ''
      'def func1'
      '  if (nbr > 1) #must fold'
      '    h = height if (nbr>2) #must not fold'
      '    w = width if (nbr>2) #same'
      '    n.upto(nbr) do (group) #must fold'
      '      h = h + height'
      '    end'
      '    model.commit_operation'
      '  end'
      'end'
      ''
      'def func2'
      '  animals = %w(lions tigers bears)'
      '  animals.each{|kind| print kind}'
      'end')
    TokenTypeNames.Strings = (
      'Var'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number'
      'If_begin')
    Extentions = 'rb rbw'
    LexerName = 'Ruby'
    SkipSpaces = False
    Notes.Strings = (
      '- Alexey (SynWrite)'
      '- Matthias (SynWrite admin)'
      ''
      'Doc: http://www.tutorialspoint.com/ruby/ruby_syntax.htm')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal19: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Shebang'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'QuotMarks'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = '$(...)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '(("|'#39'|'#180'|`)\s*)?(%?\$\w+)\1|%?\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable2'
        StyleName = 'Variable'
        Expression = '%?\$(\{|\(|\[)\S+(\}|\)|\])'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IP-Address'
        StyleName = 'QuotMarks'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?<![\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\$])\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Echo cmd'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^\#<>\|\n]*[\n]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 6
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#\$\?\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'QuotMarks'
        Expression = '("|'#39'|'#180'|`) (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addgroup'
              'adduser'
              'alias'
              'apropos'
              'apt-get'
              'aptitude'
              'aspell'
              'awk'
              'basename'
              'bash'
              'bc'
              'bg'
              'break'
              'builtin'
              'bzip2'
              'cal'
              'case'
              'cat'
              'cd'
              'cfdisk'
              'chgrp'
              'chkconfig'
              'chmod'
              'chown'
              'chroot'
              'cksum'
              'clear'
              'cmp'
              'comm'
              'command'
              'continue'
              'cp'
              'cron'
              'crontab'
              'csplit'
              'cut'
              'date'
              'dc'
              'dd'
              'ddrescue'
              'declare'
              'df'
              'diff'
              'diff3'
              'dig'
              'dir'
              'dircolors'
              'dirname'
              'dirs'
              'dmesg'
              'do'
              'done'
              'du'
              'echo'
              'egrep'
              'eject'
              'elif'
              'else'
              'enable'
              'env'
              'esac'
              'ethtool'
              'eval'
              'exec'
              'exit'
              'expand'
              'expect'
              'export'
              'expr'
              'false'
              'fdformat'
              'fdisk'
              'fg'
              'fgrep'
              'fi'
              'file'
              'find'
              'fmt'
              'fold'
              'for'
              'format'
              'free'
              'fsck'
              'ftp'
              'function'
              'fuser'
              'gawk'
              'getopts'
              'grep'
              'groups'
              'gzip'
              'halt'
              'hash'
              'head'
              'help'
              'history'
              'hostname'
              'id'
              'if'
              'ifconfig'
              'ifdown'
              'ifup'
              'import'
              'in'
              'init'
              'initlog'
              'insmod'
              'install'
              'jobs'
              'join'
              'kill'
              'killall'
              'less'
              'let'
              'linuxconf'
              'ln'
              'local'
              'locate'
              'logname'
              'logout'
              'look'
              'lpc'
              'lpr'
              'lprint'
              'lprintd'
              'lprintq'
              'lprm'
              'ls'
              'lsmod'
              'lsof'
              'make'
              'man'
              'md'
              'mkdir'
              'mkfifo'
              'mkisofs'
              'mknod'
              'mmv'
              'modprobe'
              'more'
              'mount'
              'mtools'
              'mtr'
              'mv'
              'netstat'
              'nice'
              'nl'
              'nohup'
              'notify-send'
              'nslookup'
              'op'
              'open'
              'passwd'
              'paste'
              'pathchk'
              'pidof'
              'ping'
              'pkill'
              'popd'
              'pr'
              'printcap'
              'printenv'
              'printf'
              'ps'
              'pushd'
              'pwd'
              'quota'
              'quotacheck'
              'quotactl'
              'ram'
              'rcp'
              'rd'
              'read'
              'readarray'
              'readonly'
              'reboot'
              'remsync'
              'rename'
              'renice'
              'return'
              'rev'
              'rm'
              'rmdir'
              'rmmod'
              'route'
              'rsync'
              'scp'
              'screen'
              'sdiff'
              'sed'
              'select'
              'seq'
              'set'
              'sftp'
              'shift'
              'shopt'
              'shutdown'
              'sleep'
              'slocate'
              'sort'
              'source'
              'split'
              'ssh'
              'strace'
              'su'
              'sudo'
              'sum'
              'suspend'
              'symlink'
              'sync'
              'tail'
              'tar'
              'tee'
              'test'
              'then'
              'time'
              'times'
              'top'
              'touch'
              'tr'
              'traceroute'
              'trap'
              'tree'
              'true'
              'tsort'
              'tty'
              'type'
              'ulimit'
              'umask'
              'umount'
              'unalias'
              'uname'
              'unexpand'
              'uniq'
              'units'
              'unset'
              'unshar'
              'until'
              'useradd'
              'usermod'
              'users'
              'usleep'
              'uudecode'
              'uuencode'
              'vdir'
              'vi'
              'vmstat'
              'watch'
              'wc'
              'Wget'
              'whereis'
              'which'
              'while'
              'who'
              'whoami'
              'write'
              'xargs'
              'xdg-open'
              'yes'
              'zcat'
              'zless')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func begin'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'case begin'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
          end>
        BlockEnd = 'case end'
        DisplayInTree = False
        NameFmt = '%sz0'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'case end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'esac')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if begin'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'if end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'fi')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do begin'
        ConditionList = <
          item
            TagList.Strings = (
              'do')
            TokenTypes = 4
          end>
        BlockEnd = 'do end'
        DisplayInTree = False
        NameFmt = '%sz0'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'done')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for begin'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
          end>
        BlockEnd = 'for end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'done')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '$('
        StyleName = '$(...)'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 64
          end
          item
            TagList.Strings = (
              '$')
            TokenTypes = 64
          end>
        BlockEnd = ')'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 64
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 64
          end>
        BlockEnd = ')'
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'while read line  # For as many lines as the input file has...'
      'do'
      '  test $(test "$line"); '
      '  test "test\"test" '
      '  echo "test"'
      '  len=${#line} $(text here)'
      '  if [[ "$len" -lt "$MINLEN" && "$line" =~ \[*\.\] ]]'
      '    then echo    #  Add a blank line immediately'
      '  fi             #+ after short line terminated by a period.'
      'done')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo text'
      'echo cmd'
      'Symbol')
    Extentions = 'sh csh bash /.bashrc /.zshrc'
    LexerName = 'Bash script'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias Eberhardt (SynWrite admin)'
      'Improvements: Alexey (SynWrite)')
    RestartFromLineStart = True
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal59: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Macros'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16724991
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Sent Keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 35071
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 9437184
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Registry'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 
          '#block from /* (at line start) to */ (at line start)'#13#10'(?s)^/\*.*' +
          '?(^\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after ; to end of line'#13#10';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Func'
        StyleName = 'Functions'
        TokenType = 10
        Expression = 
          '#first charecter can'#39't be digit'#13#10'^[\#!\^\+&<>\*~\$]* [a-z_]\w* :' +
          '{1,2}?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Registry'
        StyleName = 'Registry'
        TokenType = 8
        Expression = '(?i-)HKCU|HKCR|HKLM|HKU|HKCC|'#13#10'Software\\[\w\\]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with 0x sign'#13#10'0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Macros'
        StyleName = 'Macros'
        Expression = '#first charecter can'#39't be digit'#13#10'^\#[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\*\{\}\$\^\~\?!\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'AutoTrim'
              'between'
              'BlockInput'
              'Break'
              'Click'
              'ClipWait'
              'contains'
              'Continue'
              'Control'
              'ControlClick'
              'ControlFocus'
              'ControlGet'
              'ControlGetFocus'
              'ControlGetPos'
              'ControlGetText'
              'ControlMove'
              'ControlSend'
              'ControlSendRaw'
              'ControlSetText'
              'CoordMode'
              'Critical'
              'DetectHiddenText'
              'DetectHiddenWindows'
              'Drive'
              'DriveGet'
              'DriveSpaceFree'
              'Edit'
              'Else'
              'EnvAdd'
              'EnvDiv'
              'EnvGet'
              'EnvMult'
              'EnvSet'
              'EnvSub'
              'EnvUpdate'
              'Exit'
              'ExitApp'
              'FileAppend'
              'FileCopy'
              'FileCopyDir'
              'FileCreateDir'
              'FileCreateShortcut'
              'FileDelete'
              'FileGetAttrib'
              'FileGetShortcut'
              'FileGetSize'
              'FileGetTime'
              'FileGetVersion'
              'FileInstall'
              'FileMove'
              'FileMoveDir'
              'FilePattern'
              'FileRead'
              'FileReadLine'
              'FileRecycle'
              'FileRecycleEmpty'
              'FileRemoveDir'
              'FileSelectFile'
              'FileSelectFolder'
              'FileSetAttrib'
              'FileSetTime'
              'FormatTime'
              'GetKeyState'
              'Gosub'
              'Goto'
              'GroupActivate'
              'GroupAdd'
              'GroupClose'
              'GroupDeactivate'
              'Gui'
              'GuiControl'
              'GuiControlGet'
              'Hotkey'
              'If'
              'IfEqual'
              'IfExist'
              'IfGreater'
              'IfGreaterOrEqual'
              'IfInString'
              'IfLess'
              'IfLessOrEqual'
              'IfMsgBox'
              'IfNotEqual'
              'IfNotExist'
              'IfNotInString'
              'IfWinActive'
              'IfWinExist'
              'IfWinNotActive'
              'IfWinNotExist'
              'ImageSearch'
              'in'
              'IniDelete'
              'IniRead'
              'IniWrite'
              'Input'
              'InputBox'
              'KeyHistory'
              'KeyWait'
              'ListHotkeys'
              'ListLines'
              'ListVars'
              'Loop'
              'Menu'
              'MouseClick'
              'MouseClickDrag'
              'MouseGetPos'
              'MouseMove'
              'MsgBox'
              'OnExit'
              'OutputDebug'
              'Parse'
              'Pause'
              'PixelGetColor'
              'PixelSearch'
              'PostMessage'
              'Process'
              'Progress'
              'Random'
              'Read'
              'Reg'
              'RegDelete'
              'RegRead'
              'RegWrite'
              'Reload'
              'Repeat'
              'Return'
              'Run'
              'RunAs'
              'RunWait'
              'Send'
              'SendEvent'
              'SendInput'
              'SendMessage'
              'SendMode'
              'SendPlay'
              'SendRaw'
              'SetBatchLines'
              'SetCapslockState'
              'SetControlDelay'
              'SetDefaultMouseSpeed'
              'SetEnv'
              'SetFormat'
              'SetKeyDelay'
              'SetMouseDelay'
              'SetNumlockState'
              'SetScrollLockState'
              'SetStoreCapslockMode'
              'SetTimer'
              'SetTitleMatchMode'
              'SetWinDelay'
              'SetWorkingDir'
              'Shutdown'
              'Sleep'
              'Sort'
              'SoundBeep'
              'SoundGet'
              'SoundGetWaveVolume'
              'SoundPlay'
              'SoundSet'
              'SoundSetWaveVolume'
              'SplashImage'
              'SplashTextOff'
              'SplashTextOn'
              'SplitPath'
              'StatusBarGetText'
              'StatusBarWait'
              'StringCaseSense'
              'StringGetPos'
              'StringLeft'
              'StringLen'
              'StringLower'
              'StringMid'
              'StringReplace'
              'StringRight'
              'StringSplit'
              'StringTrimLeft'
              'StringTrimRight'
              'StringUpper'
              'Suspend'
              'SysGet'
              'Thread'
              'ToolTip'
              'Transform'
              'TrayTip'
              'URLDownloadToFile'
              'While'
              'WinActivate'
              'WinActivateBottom'
              'WinClose'
              'WinGet'
              'WinGetActiveStats'
              'WinGetActiveTitle'
              'WinGetClass'
              'WinGetPos'
              'WinGetText'
              'WinGetTitle'
              'WinHide'
              'WinKill'
              'WinMaximize'
              'WinMenuSelectItem'
              'WinMinimize'
              'WinMinimizeAll'
              'WinMinimizeAllUndo'
              'WinMove'
              'WinRestore'
              'WinSet'
              'WinSetTitle'
              'WinShow'
              'WinWait'
              'WinWaitActive'
              'WinWaitClose'
              'WinWaitNotActive')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BeginBlock'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'EndBlock'
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'EndBlock'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SystemVariable'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'A_AhkPath'
              'A_AhkVersion'
              'A_AppData'
              'A_AppDataCommon'
              'A_AutoTrim'
              'A_BatchLines'
              'A_CaretX'
              'A_CaretY'
              'A_ComputerName'
              'A_ControlDelay'
              'A_Cursor'
              'A_DD'
              'A_DDD'
              'A_DDDD'
              'A_DefaultMouseSpeed'
              'A_Desktop'
              'A_DesktopCommon'
              'A_DetectHiddenText'
              'A_DetectHiddenWindows'
              'A_EndChar'
              'A_EventInfo'
              'A_ExitReason'
              'A_FormatFloat'
              'A_FormatInteger'
              'A_Gui'
              'A_GuiControl'
              'A_GuiControlEvent'
              'A_GuiEvent'
              'A_GuiHeight'
              'A_GuiWidth'
              'A_GuiX'
              'A_GuiY'
              'A_Hour'
              'A_IconFile'
              'A_IconHidden'
              'A_IconNumber'
              'A_IconTip'
              'A_Index'
              'A_IPAddress1'
              'A_IPAddress2'
              'A_IPAddress3'
              'A_IPAddress4'
              'A_ISAdmin'
              'A_IsCompiled'
              'A_IsCritical'
              'A_IsPaused'
              'A_IsSuspended'
              'A_KeyDelay'
              'A_Language'
              'A_LastError'
              'A_LineFile'
              'A_LineNumber'
              'A_LoopField'
              'A_LoopFileAttrib'
              'A_LoopFileDir'
              'A_LoopFileExt'
              'A_LoopFileFullPath'
              'A_LoopFileLongPath'
              'A_LoopFileName'
              'A_LoopFileShortName'
              'A_LoopFileShortPath'
              'A_LoopFileSize'
              'A_LoopFileSizeKB'
              'A_LoopFileSizeMB'
              'A_LoopFileTimeAccessed'
              'A_LoopFileTimeCreated'
              'A_LoopFileTimeModified'
              'A_LoopReadLine'
              'A_LoopRegKey'
              'A_LoopRegName'
              'A_LoopRegSubkey'
              'A_LoopRegTimeModified'
              'A_LoopRegType'
              'A_MDAY'
              'A_Min'
              'A_MM'
              'A_MMM'
              'A_MMMM'
              'A_Mon'
              'A_MouseDelay'
              'A_MSec'
              'A_MyDocuments'
              'A_Now'
              'A_NowUTC'
              'A_NumBatchLines'
              'A_OSType'
              'A_OSVersion'
              'A_PriorHotkey'
              'A_ProgramFiles'
              'A_Programs'
              'A_ProgramsCommon'
              'A_ScreenHeight'
              'A_ScreenWidth'
              'A_ScriptDir'
              'A_ScriptFullPath'
              'A_ScriptName'
              'A_Sec'
              'A_Space'
              'A_StartMenu'
              'A_StartMenuCommon'
              'A_Startup'
              'A_StartupCommon'
              'A_StringCaseSense'
              'A_Tab'
              'A_Temp'
              'A_ThisFunc'
              'A_ThisHotkey'
              'A_ThisLabel'
              'A_ThisMenu'
              'A_ThisMenuItem'
              'A_ThisMenuItemPos'
              'A_TickCount'
              'A_TimeIdle'
              'A_TimeIdlePhysical'
              'A_TimeSincePriorHotkey'
              'A_TimeSinceThisHotkey'
              'A_TitleMatchMode'
              'A_TitleMatchModeSpeed'
              'A_UserName'
              'A_WDay'
              'A_WinDelay'
              'A_WinDir'
              'A_WorkingDir'
              'A_YDay'
              'A_YEAR'
              'A_YWeek'
              'A_YYYY'
              'Clipboard'
              'ClipboardAll'
              'ComSpec'
              'ErrorLevel'
              'False'
              'ProgramFiles'
              'True')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SentKeys'
        StyleName = 'Sent Keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '`'
              '^'
              '!'
              '#'
              '+'
              '~'
              '$'
              'Alt'
              'AltDown'
              'AltUp'
              'AppsKey'
              'BackSpace'
              'Browser_Back'
              'Browser_Favorites'
              'Browser_Forward'
              'Browser_Home'
              'Browser_Refresh'
              'Browser_Search'
              'Browser_Stop'
              'BS'
              'CapsLock'
              'Control'
              'Ctrl'
              'CtrlBreak'
              'CtrlDown'
              'CtrlUp'
              'Del'
              'Delete'
              'Down'
              'End'
              'Enter'
              'Esc'
              'Escape'
              'F1'
              'F10'
              'F11'
              'F12'
              'F13'
              'F14'
              'F15'
              'F16'
              'F17'
              'F18'
              'F19'
              'F2'
              'F20'
              'F21'
              'F22'
              'F23'
              'F24'
              'F3'
              'F4'
              'F5'
              'F6'
              'F7'
              'F8'
              'F9'
              'Home'
              'Ins'
              'Insert'
              'Joy1'
              'Joy10'
              'Joy11'
              'Joy12'
              'Joy13'
              'Joy14'
              'Joy15'
              'Joy16'
              'Joy17'
              'Joy18'
              'Joy19'
              'Joy2'
              'Joy20'
              'Joy21'
              'Joy22'
              'Joy23'
              'Joy24'
              'Joy25'
              'Joy26'
              'Joy27'
              'Joy28'
              'Joy29'
              'Joy3'
              'Joy30'
              'Joy31'
              'Joy32'
              'Joy4'
              'Joy5'
              'Joy6'
              'Joy7'
              'Joy8'
              'Joy9'
              'JoyAxes'
              'JoyButtons'
              'JoyInfo'
              'JoyName'
              'JoyPOV'
              'JoyR'
              'JoyU'
              'JoyV'
              'JoyX'
              'JoyY'
              'JoyZ'
              'LAlt'
              'Launch_App1'
              'Launch_App2'
              'Launch_Mail'
              'Launch_Media'
              'LButton'
              'LControl'
              'LCtrl'
              'Left'
              'LShift'
              'LWin'
              'LWinDown'
              'LWinUp'
              'MButton'
              'Media_Next'
              'Media_Play_Pause'
              'Media_Prev'
              'Media_Stop'
              'NumLock'
              'Numpad0'
              'Numpad1'
              'Numpad2'
              'Numpad3'
              'Numpad4'
              'Numpad5'
              'Numpad6'
              'Numpad7'
              'Numpad8'
              'Numpad9'
              'NumpadAdd'
              'NumpadClear'
              'NumpadDel'
              'NumpadDiv'
              'NumpadDot'
              'NumpadDown'
              'NumpadEnd'
              'NumpadEnter'
              'NumpadHome'
              'NumpadIns'
              'NumpadLeft'
              'NumpadMult'
              'NumpadPgdn'
              'NumpadPgup'
              'NumpadRight'
              'NumpadSub'
              'NumpadUp'
              'Pause'
              'PGDN'
              'PGUP'
              'PrintScreen'
              'RAlt'
              'RButton'
              'RControl'
              'RCtrl'
              'Right'
              'RShift'
              'RWin'
              'RWinDown'
              'RWinUp'
              'ScrollLock'
              'Shift'
              'ShiftDown'
              'ShiftUp'
              'Space'
              'Tab'
              'Up'
              'Volume_Down'
              'Volume_Mute'
              'Volume_Up'
              'WheelDown'
              'WheelLeft'
              'WheelRight'
              'WheelUp'
              'XButton1'
              'XButton2')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Macros'
        StyleName = 'Macros'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '#AllowSameLineComments'
              '#ClipboardTimeout'
              '#CommentFlag'
              '#ErrorStdOut'
              '#EscapeChar'
              '#HotkeyInterval'
              '#HotkeyModifierTimeout'
              '#Hotstring'
              '#IfWinActive'
              '#IfWinExist'
              '#IfWinNotActive'
              '#IfWinNotExist'
              '#Include'
              '#IncludeAgain'
              '#InstallKeybdHook'
              '#InstallMouseHook'
              '#KeyHistory'
              '#LTrim'
              '#MaxHotkeysPerInterval'
              '#MaxMem'
              '#MaxThreads'
              '#MaxThreadsBuffer'
              '#MaxThreadsPerHotkey'
              '#NoEnv'
              '#NoTrayIcon'
              '#Persistent'
              '#SingleInstance'
              '#UseHook'
              '#WinActivateForce')
            TokenTypes = 1
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tree item'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Comment '
      '*/'
      '#SingleInstance force'
      '#!^+&<>*~$Key:Test'
      ''
      'Tray:'
      '{'
      'WinWait, "Test" + 100 + LButton'
      'RegDelete, HKCU, Software\Micro, TotalMouseEX'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Registry'
      'Preprocessor'
      'Func')
    Extentions = 'ahk'
    LexerName = 'AutoHotkey'
    Notes.Strings = (
      'Original by: RedTiF at ghisler.ch'
      'Improvements by: Alex (SynWrite)')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal85: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Dim'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 213
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Macro'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 31993
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved Words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment BG'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clCream
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Comment #'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment ;'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'One_liner_then'
        StyleName = 'Reserved Words'
        TokenType = 6
        Expression = '(?i)then\b(?=[\x20\x09]+[^\s;])'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 2
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 2
        Expression = '0x[\da-f]+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Operator'
        StyleName = 'Operator'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(["'#39'])(\1\1|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 5
        Expression = '\$\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Macro'
        StyleName = 'Macro'
        TokenType = 5
        Expression = '\@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserved Words'
        StyleName = 'Reserved Words'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'And'
              'ByRef'
              'Case'
              'Const'
              'ContinueCase'
              'ContinueLoop'
              'Default'
              'Dim'
              'Do'
              'Else'
              'ElseIf'
              'EndFunc'
              'EndIf'
              'EndSelect'
              'EndSwitch'
              'EndWith'
              'Enum'
              'Exit'
              'ExitLoop'
              'False'
              'For'
              'Func'
              'Global'
              'If'
              'In'
              'Local'
              'Next'
              'Not'
              'Or'
              'ReDim'
              'Return'
              'Select'
              'Static'
              'Step'
              'Switch'
              'Then'
              'To'
              'True'
              'Until'
              'WEnd'
              'While'
              'With')
            TokenTypes = 1
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TreeItemImage = 1
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dim'
        StyleName = 'Dim'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Const'
              'dim'
              'Global'
              'Local'
              'redim')
            TokenTypes = 1
            IgnoreCase = True
          end>
        DynHighlight = dhRange
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Func'
        ConditionList = <
          item
            TagList.Strings = (
              'Func')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_EndFunc'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        DynSelectMin = True
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndFunc'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndFunc')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Func'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_If'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 1
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndIf'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndIf')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_If'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndIf_OneLiner'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 64
          end>
        BlockEnd = '_If'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Select'
        ConditionList = <
          item
            TagList.Strings = (
              'Select')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_EndSelect'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndSelect'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndSelect')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Select'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Switch'
        ConditionList = <
          item
            TagList.Strings = (
              'Switch')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_EndSwitch'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndSwitch'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndSwitch')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Switch'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_For'
        ConditionList = <
          item
            TagList.Strings = (
              'For')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Next'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Next'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Next')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_For'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_While'
        ConditionList = <
          item
            TagList.Strings = (
              'While')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_WEnd'
        EndOfTextClose = True
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_WEnd'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'WEnd')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_While'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Do'
        ConditionList = <
          item
            TagList.Strings = (
              'Do')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Until'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Until')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Do'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_With'
        ConditionList = <
          item
            TagList.Strings = (
              'With')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_Endwith'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Endwith'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Endwith')
            TokenTypes = 1
            IgnoreCase = True
          end>
        BlockEnd = '_With'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-start'
        StyleName = 'Comment BG'
        ConditionList = <
          item
            TagList.Strings = (
              '\#comments-start'
              '\#cs')
            CondType = tcMask
            IgnoreCase = True
          end>
        BlockEnd = '_#comments-end'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#ce'
              '\#comments-end')
            CondType = tcMask
            IgnoreCase = True
          end>
        BlockEnd = '_#comments-start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#region'
        StyleName = 'Comment'
        ConditionList = <
          item
            TagList.Strings = (
              '\#region')
            CondType = tcMask
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = '_#endregion'
        DisplayInTree = False
        HighlightPos = cpRange
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#endregion'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#endregion')
            CondType = tcMask
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = '_#region'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '  dim $t[3][2] = [["test;1;2;3", 123], _'
      '    ['#39';'#39', Asc('#39';'#39')], _ ; This comment'
      '    ["", 0]]           ; comment'
      '  #region'#9#9'Begin region '
      #9';'#9'#endregion'
      #9'If @error Then'
      #9#9'If @error = 2 Then $iMinIndex = $i'
      #9'Else'
      #9#9'Exit'
      #9'EndIf '
      '  #endregion'#9'End region'
      ''
      ' #comments-start test'
      
        '  If SetIcon ($btnIcon, $sModulesPath & "\" & GUICtrlRead ($cmbS' +
        'FXModule) & ",0") Then _'
      #9'$bIsDefaultIcon = True'
      '  #cs test'
      '    test'
      '  #ce'
      ' #comments-end test'
      ''
      '#include'
      '#include-once'
      '#NoTrayIcon'
      '#RequireAdmin'
      ''
      'Func Palitra_()'
      '  /*$zzz = 0 */'
      '  While $zzz <= 2'
      '    //$xxx = 0'
      '    While $xxx <= 5'
      '      $yyy = 0'
      '      While $yyy <= 5'
      
        '        $PalitraColor = "0x"&$ColorArray[$zzz]&$ColorArray[$xxx]' +
        '&$ColorArray[$yyy]'
      
        '        GUICtrlCreateLabel( "", ($zzz)*$PalitraSize*6+$xxx*$Pali' +
        'traSize+264, $yyy*$PalitraSize+368, $PalitraSize ,$PalitraSize)'
      '        GUICtrlSetBkColor ( -1, $PalitraColor)'
      '      WEnd'
      '    $xxx = $xxx + 1'
      '    WEnd'
      '  $zzz = $zzz +1'
      '  Wend'
      'EndFunc')
    TokenTypeNames.Strings = (
      'Id'
      'Comment'
      'Number'
      'Symbol'
      'String'
      'Variable'
      'OneLinerThen'
      'Macro')
    Extentions = 'au3'
    LexerName = 'AutoIt'
    Notes.Strings = (
      'Original by: 480499497, forum.wincmd.ru'
      'Reworked: Alex (SynWrite)')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal88: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        FormatType = ftBackGround
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Invalid symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsStrikeOut]
        BgColor = clYellow
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\^@]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Invalid symbol'
        StyleName = 'Invalid symbol'
        Expression = '.'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'absolute'
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'cdecl'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'external'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'generic'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'overload'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'specialize'
              'stdcall'
              'strict'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TokenType = 10
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'finally'#13#10#13#10'end;'
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = True
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '{$ENDIF}'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$endif')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = 'repeat ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'until ;'
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'library'
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = 'end.'
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class-object declaration'
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = 'class %s0'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'class %s0'
        GrammaRuleName = 'ObjectDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'generic declaration'
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = 'class %s-1'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'class %s-1'
        GrammaRuleName = 'GenericDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'record'
        StatesAdd = 8
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'packed')
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = 'record %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = 'record %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface section'
        StyleName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        StatesAdd = 1
        ConditionList = <
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Implementation section'
        StyleName = 'Implemenation Section'
        StatesAdd = 2
        StatesRemove = 15
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'finalization'
        ConditionList = <
          item
            TagList.Strings = (
              'finalization')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        StatesPresent = 2
        StatesAbsent = 24
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpBound
        CollapseFmt = '%s1 %s0'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'forward_func'
        StatesAbsent = 1
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Single function'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        StatesAdd = 16
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              ':'
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        StatesAdd = 16
        StatesPresent = 2
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'classes\class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of type'
        StatesRemove = 8
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Enum'
        BlockName = 'Interface section'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ';'
              '.'
              'type')
            CondType = tcMask
            TokenTypes = 14
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = 'Enum end'
        NameFmt = 'enum %s2'
        GroupFmt = 'Types'
        HighlightPos = cpBound
        CollapseFmt = 'enum %s2 ...'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Set'
        ConditionList = <
          item
            TagList.Strings = (
              'set')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = ';'
        NameFmt = 'set %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'unit'
        BlockName = 'Uses'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end>
        BlockEnd = 'unit end'
        NotCollapsed = True
        NameFmt = '%s0~e1'
        HighlightPos = cpBound
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ','
              ';')
            TokenTypes = 8
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Uses'
        ConditionList = <
          item
            TagList.Strings = (
              'uses')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = ';'
        HighlightPos = cpBound
        CollapseFmt = 'uses ...'
        TreeItemImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Enum end'
        BlockName = 'Enum'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = ';'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'REGION'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$REGION')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = 'REGION END'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'REGION END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$ENDREGION')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function out of all'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End of Func out of all'
        NameFmt = '%s0 %s-1'
        GroupFmt = 'Functions'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of Func out of all'
        BlockName = 'Function out of all'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Invalid close bracket'
        StyleName = 'Invalid symbol'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'#13#10
        EndExpression = 'end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'unit Test;    '
      ''
      'interface'
      ''
      'uses aa.aa, bb, cc.cc.cc;                          '
      ''
      'const'
      '  cColorCodes: array[0..1] of TColorCode = ('
      '    (sName: '#39'AliceBlue'#39'; sVal: '#39'#00'#39'),'
      '    (sName: '#39'AntiqueWhite'#39'; sVal: '#39'#00'#39'),'
      '    );'
      '    '
      'type                        '
      '  TForm1 = class(TForm)    '
      '    procedure Button1Click(Sender: TObject);'
      '  end;                             '
      '                   '
      'implementation                                      '
      
        '                                                                ' +
        '       '
      '{Syntax highlighting}  '
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caption := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;'
      ''
      'begin'
      '  if A then'
      '  begin'
      '    Do_;'
      '  end;'
      'end.')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = 
      'Skip = <Comment> | <Preprocessor>;'#13#10#13#10'// Class declaration'#13#10'Clas' +
      'sDecl = <Identifier> '#39'='#39' '#39'class'#39' InheritedList? <Identifier>;'#13#10'E' +
      'mptyClass = <Identifier> '#39'='#39' "class" InheritedList '#39';'#39';'#13#10#13#10'// Ge' +
      'neric'#13#10'ObjectDecl = <Identifier> '#39'='#39' "object"'#13#10'GenericDecl = "ge' +
      'neric" <Identifier>'#13#10#13#10'// Interface declaration'#13#10'IntfDecl = <Ide' +
      'ntifier> '#39'='#39' ("interface" | "dispinterface") InheritedList? Intf' +
      'NextToken;'#13#10'IntfNextToken = '#39'['#39' | <Identifier>; '#13#10#13#10'InheritedLis' +
      't = '#39'('#39' IdentList '#39')'#39';'#13#10'IdentList = <Identifier> ('#39','#39' <Identifie' +
      'r>)*;'#13#10
    CurrentLineStyle = 'Current Line'
    Extentions = 'pas inc dpr dpk lpr p pp'
    LexerName = 'Pascal'
    Notes.Strings = (
      'Changed by Alexey')
    LineComment = '//'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal86: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comm'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symb'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'IdRes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Class'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'DataType'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '--[^\+\*/].*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm2'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '(?s)\{-.*?(-\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'Str'
        TokenType = 8
        Expression = #39'.'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symb'
        TokenType = 3
        Expression = '[!\?\#\-\+/\*=<>\(\)\[\]\.\:;@\|\\_`\{\}~,&\$\^]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+\.\d+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[\w_'#39']+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key'
        StyleName = 'IdRes'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'as'
              'case'
              'class'
              'data'
              'default'
              'deriving'
              'do'
              'else'
              'family'
              'forall'
              'foreign'
              'hiding'
              'if'
              'import'
              'in'
              'infix'
              'infixl'
              'infixr'
              'instance'
              'let'
              'mdo'
              'module'
              'newtype'
              'of'
              'proc'
              'qualified'
              'rec'
              'then'
              'type'
              'where')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Classes'
        StyleName = 'Class'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Bounded'
              'Enum'
              'Eq'
              'EQ'
              'Eval'
              'False'
              'Floating'
              'Fractional'
              'Functor'
              'GT'
              'Integral'
              'Ix'
              'Just'
              'Left'
              'LT'
              'Monad'
              'MonadPlus'
              'MonadZero'
              'Nothing'
              'Num'
              'Ord'
              'Prelude'
              'Read'
              'Real'
              'RealFloat'
              'RealFrac'
              'Right'
              'Show'
              'True'
              'Void')
            TokenTypes = 1028
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Data Type'
        StyleName = 'DataType'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Addr'
              'Bool'
              'Char'
              'Double'
              'Either'
              'EmptyRec'
              'EmptyRow'
              'FilePath'
              'Float'
              'Int'
              'Integer'
              'IO'
              'IOError'
              'IOResult'
              'Long'
              'Maybe'
              'Ordering'
              'Ratio'
              'Rational'
              'ReadS'
              'Rec'
              'ShowS'
              'String')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'main = print "test", "t", '#39'_'#39' --comment'
      '--this is comment'
      '---this too'
      'foobar --+ a_second_argument'
      ''
      '{-'
      'comment'
      'too'
      '-}'
      ''
      'putStrLn $ "Chars: \"" ++ listedChars ++ "\""'
      'f1,f2 :: Maybe Int -> String;'
      ''
      'if '#39'lookup == Nothing'
      'then '#39'setHelper')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'hs lhs as las'
    LexerName = 'Haskell'
    Notes.Strings = (
      'Author:'
      'A. Torgashin (uvviewsoft.com)'
      ''
      'Info:'
      'http://www.haskell.org/haskellwiki/Keywords'
      'Ex.files:'
      
        'http://www.haskell.org/haskellwiki/Haskell_Tutorial_for_C_Progra' +
        'mmers#Downloads')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal90: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id reserved'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id standard'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'CommLongBracket'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)-- \[\[ .*? (\]\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CommLongBracket2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)-- \[(=+)\[ .*? (\]\1\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StrLongBracket'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)\[\[ .*? (\]\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StrLongBracket2'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)\[(=+)\[ .*? (\]\1\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39')(\\"|\\'#39'|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '_IdFunc1'
        StyleName = 'Id func'
        TokenType = 10
        Expression = '[\w\.:]+(?=\s*=\s*function\s*\()'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '_IdFunc2'
        StyleName = 'Id func'
        TokenType = 10
        Expression = '(?<=function\x20+)[\w\.:]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-zA-Z_][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumHex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[A-Fa-f0-9]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumFlo'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+(\.\d+)? e[\+\-]?\d+ |'#13#10'\d+\.\d+ '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Id keyword'
        StyleName = 'Id reserved'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'break'
              'do'
              'else'
              'elseif'
              'end'
              'false'
              'for'
              'function'
              'if'
              'in'
              'local'
              'nil'
              'not'
              'or'
              'repeat'
              'return'
              'then'
              'true'
              'until'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Id std'
        StyleName = 'Id standard'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '_ALERT'
              '_ERRORMESSAGE'
              '_G'
              '_INPUT'
              '_OUTPUT'
              '_PROMPT'
              '_STDERR'
              '_STDIN'
              '_STDOUT'
              '_VERSION'
              'abs'
              'acos'
              'appendto'
              'asin'
              'assert'
              'atan'
              'atan2'
              'call'
              'ceil'
              'clock'
              'closefile'
              'collectgarbage'
              'coroutine'
              'cos'
              'date'
              'debug'
              'deg'
              'difftime'
              'dofile'
              'dostring'
              'error'
              'execute'
              'exit'
              'exp'
              'floor'
              'flush'
              'foreach'
              'foreachi'
              'format'
              'frexp'
              'gcinfo'
              'getenv'
              'getfenv'
              'getmetatable'
              'getn'
              'globals'
              'gsub'
              'io'
              'ipairs'
              'ldexp'
              'loadfile'
              'loadlib'
              'loadstring'
              'log'
              'log10'
              'math'
              'max'
              'min'
              'mod'
              'newtype'
              'next'
              'openfile'
              'os'
              'pairs'
              'pcall'
              'print'
              'rad'
              'random'
              'randomseed'
              'rawegal'
              'rawget'
              'rawset'
              'read'
              'readfrom'
              'remove'
              'rename'
              'require'
              'seek'
              'setfenv'
              'setlocale'
              'setmetatable'
              'sin'
              'sort'
              'sqrt'
              'strbyte'
              'strchar'
              'strfind'
              'string'
              'strlen'
              'strlower'
              'strrep'
              'strsub'
              'strupper'
              'table'
              'tan'
              'time'
              'tinsert'
              'tmpfile'
              'tmpname'
              'tonumber'
              'tostring'
              'tremove'
              'type'
              'unpack'
              'write'
              'writeto'
              'xpcall')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'end'
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'do'
              'function'
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '--Str'
      '--test'
      '--test'
      ''
      ' s = '#39'ww\'#39'ww'#39', "ww\"ww", '#39'alo\n123"'#39
      ' a = [[alo'
      '  123]] test'
      ' a = [==['
      '  alo'
      '  123]==] test'
      ''
      ' n = 2 + 2.22 + 22.22e-2 + 0.22E1 '
      ' n = 0xF0'
      ''
      'function Set.mt.__lt (a,b)'
      '  return a <= b and not (b <= a)'
      'end'
      ''
      'function perm:app (a, n)'
      '  if n == 0 then'
      '    coroutine.yield(a)'
      '  else'
      '    for i=1,n do'
      '      -- put i-th element as the last one'
      '      a[n], a[i] = a[i], a[n]'
      ''
      '      -- generate all permutations of the other elements'
      '      permgen(a, n - 1)'
      ''
      '      -- restore i-th element'
      '      a[n], a[i] = a[i], a[n]'
      '    end'
      '  end'
      'end'
      ''
      'function perm (a)'
      '  local n = table.getn(a)'
      '  return coroutine.wrap(function () permgen(a, n) end)'
      'end'
      ''
      'function printResult (a)'
      '  for i,v in ipairs(a) do'
      '    io.write(v, " ")'
      '  end'
      '  io.write("\n")'
      'end'
      'repeat'
      '  print "aa"'
      'until true ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Func name')
    Extentions = 'lua'
    LexerName = 'Lua'
    Notes.Strings = (
      'Alex (Synwrite)'
      'Ref: http://www.lua.org/manual/5.1/manual.html')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal96: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 47360
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag id correct'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag id incorrect'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clRed
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 53760
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag back hl'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Tag border hl'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12372132
      end
      item
        DisplayName = 'Sublexer BG'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14804688
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '-->'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment <!...>'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '<! .*? >'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-%\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '[%\?/]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'#39') (<\?.+?\?>|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag id correct'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag id incorrect'
        StyleName = 'Tag id incorrect'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag id'
        StyleName = 'Tag id correct'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'a'
              'abbr'
              'acronym'
              'address'
              'applet'
              'area'
              'article'
              'aside'
              'audio'
              'b'
              'base'
              'basefont'
              'bdi'
              'bdo'
              'bgsound'
              'big'
              'blink'
              'blockquote'
              'body'
              'br'
              'button'
              'canvas'
              'caption'
              'center'
              'cite'
              'code'
              'col'
              'colgroup'
              'command'
              'comment'
              'datalist'
              'dd'
              'del'
              'details'
              'dfn'
              'dir'
              'div'
              'dl'
              'doctype'
              'dt'
              'em'
              'embed'
              'fieldset'
              'figcaption'
              'figure'
              'font'
              'footer'
              'form'
              'frame'
              'frameset'
              'h1'
              'h2'
              'h3'
              'h4'
              'h5'
              'h6'
              'head'
              'header'
              'hgroup'
              'hr'
              'html'
              'i'
              'iframe'
              'img'
              'input'
              'ins'
              'kbd'
              'keygen'
              'label'
              'legend'
              'li'
              'link'
              'map'
              'mark'
              'marquee'
              'menu'
              'meta'
              'meter'
              'multicol'
              'nav'
              'nobr'
              'noembed'
              'noframes'
              'noindex'
              'noscript'
              'object'
              'ol'
              'optgroup'
              'option'
              'output'
              'p'
              'param'
              'plaintext'
              'pre'
              'progress'
              'q'
              'rp'
              'rt'
              'ruby'
              's'
              'samp'
              'script'
              'section'
              'select'
              'small'
              'source'
              'spacer'
              'span'
              'strike'
              'strong'
              'style'
              'sub'
              'summary'
              'sup'
              'table'
              'tbody'
              'td'
              'textarea'
              'tfoot'
              'th'
              'thead'
              'time'
              'title'
              'tr'
              'track'
              'tt'
              'u'
              'ul'
              'var'
              'video'
              'wbr')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag begin'
        StyleName = 'Tag border hl'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        NameFmt = '%s0'
        HighlightPos = cpBound
        DynSelectMin = True
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Tag back hl'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block end'
        NameFmt = '%s0~s[>]1'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '<%s0>'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        DynSelectMin = True
        CollapseFmt = '<!--  ...  -->'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpBound
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal56
      end
      item
        DisplayName = 'JavaScript'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript [^>]* [^\?] > \s*(<!--)?'
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal38
      end
      item
        DisplayName = 'JavaScript simple'
        StyleName = 'Sublexer BG'
        StartExpression = '<script>'
        EndExpression = '</script>'
        SyntAnalyzer = SyntAnal38
      end
      item
        DisplayName = 'ASP'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '<%[^@]'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnal56
      end>
    SampleText.Strings = (
      '<!DOCUMENT test="123">'
      ''
      '<META1 error />'
      '<meta2>error</meta3>'
      '<html> '
      '  <head>'
      '    <title test="15">Text</title>'
      '  </head>'
      ''
      '  <script type="text/javascript">'
      '    var n=10; '
      '  </script>'
      
        '  <script type="text/javascript" src="<?=SITE_TEMPLATE_PATH?>/js' +
        '/jquery.js">'
      '    var n=10;'
      '  </script>'
      '      '
      '  <body src="www.com" style='#39'aaa; aaa; aaa;'#39'> '
      '    <h1>Text</h1> '
      '  </body> '
      '</html>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    Extentions = 
      'htm html htt hta htx htc htd shtml phtml xhtml asp aspx ascx asm' +
      'x jsp hhc dtd'
    LexerName = 'HTML'
    Notes.Strings = (
      'Created by 480499497 from http://forum.wincmd.ru')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal97: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Comment doc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol single'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String exec'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16766421
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 41984
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = ANSI_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Arial Rounded MT Bold'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id standard const'
        Font.Charset = ANSI_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Arial'
        Font.Style = []
      end
      item
        DisplayName = 'Id standard class'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'PHP_start'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15528434
        BorderColorLeft = clLime
        BorderColorTop = clLime
      end
      item
        DisplayName = 'PHP_end'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15528434
        BorderColorRight = clLime
        BorderColorBottom = clLime
      end
      item
        DisplayName = 'PHP_bg'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15528434
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Bracket'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 41984
      end>
    TokenRules = <
      item
        DisplayName = 'php start'
        StyleName = 'PHP_start'
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'php end'
        StyleName = 'PHP_end'
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment doc'
        StyleName = 'Comment doc'
        Expression = '(?s)/\*\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment block'
        StyleName = 'Comment'
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment line 2'
        StyleName = 'Comment'
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment line'
        StyleName = 'Comment'
        Expression = '// .* (?=\?>) | //.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 2
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 2
        Expression = '0x[0-9a-f]+ |'#13#10'0b[01]+ |'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 3
        Expression = '(?s)<<<(\w+)\z.+?\z\1;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol op'
        StyleName = 'Symbol operator'
        TokenType = 4
        Expression = '[!/\+\-\*:=<>&/\|\^~\@\%\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol single'
        StyleName = 'Symbol single'
        TokenType = 5
        Expression = '[\{\}\(\)\[\],;\.\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 3
        Expression = '(?s)(["'#39'])(\\\1|\\\\|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 6
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 1
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Exec'
        StyleName = 'String exec'
        TokenType = 3
        Expression = '`.+?`'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__halt_compiler'
              'abstract'
              'and'
              'array'
              'as'
              'break'
              'callable'
              'case'
              'catch'
              'class'
              'clone'
              'const'
              'continue'
              'declare'
              'default'
              'die'
              'do'
              'echo'
              'else'
              'elseif'
              'empty'
              'enddeclare'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'eval'
              'exit'
              'extends'
              'final'
              'for'
              'foreach'
              'function'
              'global'
              'goto'
              'if'
              'implements'
              'include'
              'include_once'
              'instanceof'
              'insteadof'
              'interface'
              'isset'
              'list'
              'namespace'
              'new'
              'or'
              'print'
              'private'
              'protected'
              'public'
              'require'
              'require_once'
              'return'
              'static'
              'switch'
              'throw'
              'trait'
              'try'
              'unset'
              'use'
              'var'
              'while'
              'xor')
            TokenTypes = 2
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'keywords php7'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bool'
              'false'
              'float'
              'int'
              'mixed'
              'null'
              'numeric'
              'object'
              'resource'
              'string'
              'true')
            TokenTypes = 2
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'std const'
        StyleName = 'Id standard const'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__CLASS__'
              '__COMPILER_HALT_OFFSET__'
              '__DIR__'
              '__FILE__'
              '__FUNCTION__'
              '__LINE__'
              '__METHOD__'
              '__NAMESPACE__'
              '__TRAIT__'
              'DEFAULT_INCLUDE_PATH'
              'E_ALL'
              'E_COMPILE_ERROR'
              'E_COMPILE_WARNING'
              'E_CORE_ERROR'
              'E_CORE_WARNING'
              'E_DEPRECATED'
              'E_ERROR'
              'E_NOTICE'
              'E_PARSE'
              'E_STRICT'
              'E_USER_DEPRECATED'
              'E_USER_ERROR'
              'E_USER_NOTICE'
              'E_USER_WARNING'
              'E_WARNING'
              'FALSE'
              'NULL'
              'PEAR_EXTENSION_DIR'
              'PEAR_INSTALL_DIR'
              'PHP_BINARY'
              'PHP_BINDIR'
              'PHP_CONFIG_FILE_PATH'
              'PHP_CONFIG_FILE_SCAN_DIR'
              'PHP_DATADIR'
              'PHP_DEBUG'
              'PHP_EOL'
              'PHP_EXTENSION_DIR'
              'PHP_EXTRA_VERSION'
              'PHP_INT_MAX'
              'PHP_INT_MIN'
              'PHP_INT_SIZE'
              'PHP_LIBDIR'
              'PHP_LOCALSTATEDIR'
              'PHP_MAJOR_VERSION'
              'PHP_MANDIR'
              'PHP_MAXPATHLEN'
              'PHP_MINOR_VERSION'
              'PHP_OS'
              'PHP_PREFIX'
              'PHP_RELEASE_VERSION'
              'PHP_SAPI'
              'PHP_SHLIB_SUFFIX'
              'PHP_SYSCONFDIR'
              'PHP_VERSION'
              'PHP_VERSION_ID'
              'PHP_ZTS'
              'TRUE')
            TokenTypes = 2
          end>
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
        TreeItemStyle = 'Id standard const'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'std classes'
        StyleName = 'Id standard class'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__PHP_Incomplete_Class'
              'ArrayIterator'
              'ArrayObject'
              'CachingIterator'
              'CachingRecursiveIterator'
              'Directory'
              'DirectoryIterator'
              'DOMAttr'
              'DOMCdataSection'
              'DOMCharacterData'
              'DOMComment'
              'DOMConfiguration'
              'DOMDocument'
              'DOMDocumentFragment'
              'DOMDocumentType'
              'DOMDomError'
              'DOMElement'
              'DOMEntity'
              'DOMEntityReference'
              'DOMErrorHandler'
              'DOMException'
              'DOMImplementation'
              'DOMImplementationList'
              'DOMImplementationSource'
              'DOMLocator'
              'DOMNamedNodeMap'
              'DOMNameList'
              'DOMNameSpaceNode'
              'DOMNode'
              'DOMNodeList'
              'DOMNotation'
              'DOMProcessingInstruction'
              'DOMStringExtend'
              'DOMStringList'
              'DOMText'
              'DOMTypeinfo'
              'DOMUserDataHandler'
              'DOMXPath'
              'Exception'
              'FilterIterator'
              'LimitIterator'
              'ParentIterator'
              'php_user_filter'
              'RecursiveDirectoryIterator'
              'RecursiveIteratorIterator'
              'Reflection'
              'ReflectionClass'
              'ReflectionException'
              'ReflectionExtension'
              'ReflectionFunction'
              'ReflectionMethod'
              'ReflectionObject'
              'ReflectionParameter'
              'ReflectionProperty'
              'SimpleXMLElement'
              'SimpleXMLIterator'
              'SQLiteDatabase'
              'SQLiteException'
              'SQLiteResult'
              'SQLiteUnbuffered'
              'stdClass'
              'XSLTProcessor')
            TokenTypes = 2
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'php start'
        StyleName = 'PHP_bg'
        ConditionList = <
          item
            TagList.Strings = (
              '<?'
              '<?php')
          end>
        BlockEnd = 'php end'
        DisplayInTree = False
        NameFmt = '<%s-1>'
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        DynSelectMin = True
        CollapseFmt = 'PHP.....'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'php end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '?>')
          end>
        BlockEnd = 'php start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Bracket'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 32
          end>
        BlockEnd = '}'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '...'
        Pen.Color = clRed
        Pen.Style = psDot
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'#13#10
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 32
          end>
        BlockEnd = '{'
        HighlightPos = cpAny
        GroupIndex = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'var'
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 16
          end
          item
            TokenTypes = 64
          end>
        NameFmt = '%s0'
        GroupFmt = 'var'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'field'
        ConditionList = <
          item
            TagList.Strings = (
              '('
              '=')
            TokenTypes = 80
          end
          item
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              '>')
            TokenTypes = 16
          end
          item
            TagList.Strings = (
              '-')
            TokenTypes = 16
          end
          item
            TokenTypes = 66
          end>
        NameFmt = '%s0~s-3'
        GroupFmt = 'var'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Bracket'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 32
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 32
          end>
        BlockEnd = '('
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Bracket'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 32
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 32
          end>
        BlockEnd = '['
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 2
          end>
        BlockEnd = 'class_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class_end'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        BlockName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 2
          end>
        BlockEnd = 'func_end'
        EndOfTextClose = True
        NameFmt = '%s0~[(]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_end'
        BlockName = 'func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_without_class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 2
          end>
        BlockEnd = 'func_without_class_end'
        NameFmt = '%s0~[(]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_without_class_end'
        BlockName = 'func_without_class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'include'
        ConditionList = <
          item
            TagList.Strings = (
              'include'
              'include_once'
              'require'
              'require_once')
            TokenTypes = 2
          end>
        NameFmt = '%sz0'
        GroupFmt = '\Includes'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'PHP_dev_HTML'
        StartExpression = '\?>'
        EndExpression = '<\?'
        SyntAnalyzer = SyntAnal96
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<?php //Example'
      '/** Doc comment'
      '*/,  /* Comment */'
      '__CLASS__, __LINE__, ArrayObject, Directory'
      ''
      'include "os.php";'
      'include_once $path."/os2.php";'
      'include("math.php");'
      'include_once("math2.php");'
      ''
      'function pp_out1(int $a){'
      '  $a = 10 + 10.10 + 0xAF + 0b1100;'
      '  $this->var = 100;'
      '  $this->proc($var);'
      '  echo [ $a, $b, $aa ]'
      '  echo '#39'test'#39'."\\";'
      '  if (a){'
      '  }'
      '  else {'
      '  };'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    $n = 10;'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp_out2($a; $b){'
      '  $i++;'
      '  if ($a){'
      '  }'
      '}'
      ''
      '?>')
    TokenTypeNames.Strings = (
      'Comment'
      'Id'
      'Number'
      'String'
      'Symbol op '
      'Symbol single'
      'Var')
    Extentions = 'php php2 php3 php4 php5'
    LexerName = 'PHP'
    Notes.Strings = (
      'Created by 480499497 from http://forum.wincmd.ru'
      'Big rework by Alexey (SynWrite)')
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal101: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.,;!%~\^\?\{\}\[\]\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'false'
              'null'
              'true')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = '}'
        EndOfTextClose = True
        NameFmt = '%s2'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        CollapseFmt = '%s2'
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'param'
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 16
          end>
        NameFmt = '%s0'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{'
      '    "glossary": {'
      '        "title": "example glossary",'
      #9#9'"GlossDiv": {'
      '            "title": "S",'
      #9#9#9'"GlossList": {'
      '                "GlossEntry": {'
      '                    "ID": "SGML",'
      #9#9#9#9#9'"SortAs": "SGML",'
      #9#9#9#9#9'"GlossTerm": "Standard Generalized Markup Language",'
      #9#9#9#9#9'"GlossDef": {'
      
        '                        "para": "A meta-markup language, used to' +
        ' create markup languages such as DocBook.",'
      #9#9#9#9#9#9'"GlossSeeAlso": ["GML", "XML"]'
      '                    },'
      '                    "ArrayId": ['
      '                      {"id": "1"},'
      '                      {"id": "2", "Text": "TT"}'
      '                    ]                    '
      '                }'
      '            }'
      '        }'
      '    }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number')
    Extentions = 'json'
    LexerName = 'JSON'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test'
      'http://json.org/example.html'
      'http://www.jquery4u.com/json/10-example-json-files/')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal6: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'StringHere'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Cmd'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) <\# .*? (\#>|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '" (`"|""|.)*? ("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39' .*? ('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HereString'
        StyleName = 'StringHere'
        TokenType = 4
        Expression = '(?s) @"$ .+? ^"@'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdVariable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Begin'
              'Break'
              'Catch'
              'Continue'
              'Data'
              'Do'
              'Dynamicparam'
              'Else'
              'Elseif'
              'End'
              'Exit'
              'Filter'
              'Finally'
              'For'
              'Foreach'
              'From'
              'Function'
              'If'
              'In'
              'Local'
              'Param'
              'Private'
              'Process'
              'Return'
              'Switch'
              'Throw'
              'Trap'
              'Try'
              'Until'
              'Where'
              'While')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Cmd'
        StyleName = 'Cmd'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add-content'
              'add-history'
              'add-member'
              'add-pssnapin'
              'clear-content'
              'clear-item'
              'clear-itemproperty'
              'clear-variable'
              'compare-object'
              'convertfrom-securestring'
              'convert-path'
              'convertto-html'
              'convertto-securestring'
              'copy-item'
              'copy-itemproperty'
              'export-alias'
              'export-clixml'
              'export-console'
              'export-csv'
              'foreach-object'
              'format-custom'
              'format-list'
              'format-table'
              'format-wide'
              'get-acl'
              'get-alias'
              'get-authenticodesignature'
              'get-childitem'
              'get-command'
              'get-content'
              'get-credential'
              'get-culture'
              'get-date'
              'get-eventlog'
              'get-executionpolicy'
              'get-help'
              'get-history'
              'get-host'
              'get-item'
              'get-itemproperty'
              'get-location'
              'get-member'
              'get-pfxcertificate'
              'get-process'
              'get-psdrive'
              'get-psprovider'
              'get-pssnapin'
              'get-service'
              'get-tracesource'
              'get-uiculture'
              'get-unique'
              'get-variable'
              'get-wmiobject'
              'group-object'
              'import-alias'
              'import-clixml'
              'import-csv'
              'invoke-expression'
              'invoke-history'
              'invoke-item'
              'join-path'
              'measure-command'
              'measure-object'
              'move-item'
              'move-itemproperty'
              'new-alias'
              'new-item'
              'new-itemproperty'
              'new-object'
              'new-psdrive'
              'new-service'
              'new-timespan'
              'new-variable'
              'out-default'
              'out-file'
              'out-host'
              'out-null'
              'out-printer'
              'out-string'
              'pop-location'
              'push-location'
              'read-host'
              'remove-item'
              'remove-itemproperty'
              'remove-psdrive'
              'remove-pssnapin'
              'remove-variable'
              'rename-item'
              'rename-itemproperty'
              'resolve-path'
              'restart-service'
              'resume-service'
              'select-object'
              'select-string'
              'set-acl'
              'set-alias'
              'set-authenticodesignature'
              'set-content'
              'set-date'
              'set-executionpolicy'
              'set-item'
              'set-itemproperty'
              'set-location'
              'set-psdebug'
              'set-service'
              'set-tracesource'
              'set-variable'
              'sort-object'
              'split-path'
              'start-service'
              'start-sleep'
              'start-transcript'
              'stop-process'
              'stop-service'
              'stop-transcript'
              'suspend-service'
              'tee-object'
              'test-path'
              'trace-command'
              'update-formatdata'
              'update-typedata'
              'where-object'
              'write-debug'
              'write-error'
              'write-host'
              'write-output'
              'write-progress'
              'write-verbose'
              'write-warning')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '# Convert any text file to UTF-8'
      
        'param( [string] $infile = $(throw "Please specify a filename.") ' +
        ')'
      '$outfile = "$infile.utf8"'
      'get-content -Path $infile | out-file $outfile -encoding utf8'
      ''
      '$s = "My name is `"Joe"", hi" + '#39'Joe'#39#39'test'#39' test'
      '$string = @"'
      'one'
      '"@'
      ''
      '<# Block comment'
      '#>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    Extentions = 'ps1'
    LexerName = 'PowerShell'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://www.robvanderwoude.com/powershellexamples.php')
    LineComment = '# '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal20: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clSkyBlue
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16769505
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 1
        Expression = '^\s*\#.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'asm'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '('
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Single function'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        NameFmt = '%s2 %s1'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{Syntax highlighting}'
      '  #ifdef'
      '  #endif'
      'procedure Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Form.Caprion := '#39'This Number is '#39' + IntToStr(Number); // View s' +
        'tring style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    LexerName = 'Pascal script'
    SkipSpaces = False
    Notes.Strings = (
      'This lexer is used in Inno Setup to hilite [Code] blocks.')
    Internal = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal7: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 206
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String Eval'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blDot
        BorderColorBottom = clTeal
      end
      item
        DisplayName = 'Color'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        BlockName = '{'
        TokenType = 7
        Expression = '[\w\.-]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        TokenType = 4
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;:,%\(\)\{\}\[\]\-\+\*~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Const'
        StyleName = 'Const'
        TokenType = 5
        Expression = '\#[\da-f]+\b |'#13#10'\b \d+(\.\d+)? (%|\w+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '@\w[\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 6
        Expression = '[\w\.\-\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Eval'
        StyleName = 'String Eval'
        TokenType = 4
        Expression = '` .*? (`|$) '
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Id Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alpha'
              'and'
              'ceil'
              'darken'
              'desaturate'
              'fade'
              'fadein'
              'fadeout'
              'floor'
              'hue'
              'iscolor'
              'isem'
              'iskeyword'
              'isnumber'
              'ispercentage'
              'ispixel'
              'isstring'
              'isurl'
              'lighten'
              'lightness'
              'mix'
              'not'
              'percentage'
              'rgb'
              'rgba'
              'round'
              'saturate'
              'saturation'
              'spin'
              'true'
              'when')
            TokenTypes = 64
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl0'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 520
          end
          item
            TokenTypes = 128
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 8
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '// Comment'
      '@base: #ff40aa;'
      '@height: `document.body.clientHeight`;'
      '@filter: ~"ms:alwaysHasItsOwnSyntax()";'
      ''
      '.box-shadow(@style, @c) when (iscolor(@c)) {'
      '  box-shadow:         @style @c;'
      '  -webkit-box-shadow: @style @c;'
      '}'
      '.box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)) {'
      '  .box-shadow(@style, rgba(0, 0, 0, @alpha));'
      '}'
      '.box {'
      '  color: saturate(@base, 5%);'
      '  border-color: lighten(@base, 30%);'
      '  div { .box-shadow(0 0 5px, 30%) }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Var'
      'Symbol'
      'String'
      'Const'
      'Id'
      'Param')
    Extentions = 'less'
    LexerName = 'LESS'
    Notes.Strings = (
      'Alex (Synwrite)'
      'Test: http://lesscss.org/')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal48: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 206
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blDot
        BorderColorBottom = clTeal
      end
      item
        DisplayName = 'Commd'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Color'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        BlockName = '{'
        TokenType = 7
        Expression = '[\w\.-][\w\-\#\{\}\$]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        TokenType = 4
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Const'
        StyleName = 'Const'
        TokenType = 5
        Expression = '\#[\da-f]+\b |'#13#10'\b \d+(\.\d+)? (%|\w+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '\$\w[\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 6
        Expression = '[\w\.\-][\w\-\#\{\}\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;:,%\(\)\{\}\[\]\-\+\*~&\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Commd'
        StyleName = 'Commd'
        TokenType = 6
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'KeywFunc'
        StyleName = 'Id Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'adjust-color'
              'adjust-hue'
              'alpha'
              'append'
              'blue'
              'ceil'
              'change-color'
              'comparable'
              'complement'
              'darken'
              'desaturate'
              'fade-in'
              'fade-out'
              'floor'
              'grayscale'
              'green'
              'hsl'
              'hsla'
              'hue'
              'if'
              'invert'
              'join'
              'length'
              'lighten'
              'lightness'
              'mix'
              'nth'
              'opacify'
              'opacity'
              'percentage'
              'quote'
              'red'
              'rgb'
              'rgba'
              'round'
              'saturate'
              'saturation'
              'scale-color'
              'transparentize'
              'type-of'
              'unit'
              'unitless'
              'unquote')
            TokenTypes = 64
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl0'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'#13#10
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 520
          end
          item
            TokenTypes = 128
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 8
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* style.scss */'
      'a {'
      '  color: rgb(10, 10, 0);'
      '  &:hover { color: #ffbbff; }'
      '}'
      ''
      '@mixin rounded-top {'
      '  $side: top;'
      '  $radius: 10px;'
      '  border-#{$side}-radius: $radius;'
      '  -moz-border-radius-#{$side}: $radius;'
      '}'
      ''
      '#navbar li { @include rounded-top; }')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Var'
      'Symbol'
      'String'
      'Const'
      'Id'
      'Param')
    Extentions = 'scss'
    LexerName = 'SCSS'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test: '
      'http://sass-lang.com/tutorial.html'
      'Func list:'
      'http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal33: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'File names'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clSkyBlue
      end
      item
        DisplayName = 'Chunk start'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12615935
      end
      item
        DisplayName = 'Context line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSilver
      end
      item
        DisplayName = 'Added line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 8454016
      end
      item
        DisplayName = 'Deleted line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 8421631
      end
      item
        DisplayName = 'Index line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clCream
      end>
    TokenRules = <
      item
        DisplayName = 'File name'
        StyleName = 'File names'
        Expression = '^(---|\+\+\+).*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Chunk start'
        StyleName = 'Chunk start'
        TokenType = 1
        Expression = '^@@.*@@'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Added line'
        StyleName = 'Added line'
        TokenType = 2
        Expression = '^+.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Deleted line'
        StyleName = 'Deleted line'
        TokenType = 2
        Expression = '^-.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Context line'
        StyleName = 'Context line'
        TokenType = 3
        Expression = '^\s.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Index line'
        StyleName = 'Index line'
        TokenType = 5
        Expression = '^Index: .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Other lines'
        TokenType = 6
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Index-line'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Index: components/chmhelp/lhelp/lhelp.ico'
      
        '================================================================' +
        '==='
      'Cannot display: file marked as a binary type.'
      'svn:mime-type = image/icon'
      'Index: ide/filename'
      'some text'
      'simple text'
      '--- a/python/Makefile.am'#9'2010-05-26 22:09:50 +0000'
      '+++ b/python/Makefile.am'#9'2010-09-10 20:26:24 +0000'
      '@@ -41,9 +41,9 @@'
      ' libvirtmod_la_CFLAGS = $(WARN_PYTHON_CFLAGS)'
      ' '
      
        ' libvirtmod_la_LDFLAGS = -module -avoid-version -shared -L$(top_' +
        'builddir)/src/.libs \'
      '-'#9'$(CYGWIN_EXTRA_LDFLAGS)'
      '+'#9'$(CYGWIN_EXTRA_LDFLAGS) $(MINGW_EXTRA_LDFLAGS) -L/python/libs'
      ' libvirtmod_la_LIBADD = $(mylibs) \'
      '-'#9'$(CYGWIN_EXTRA_LIBADD) $(CYGWIN_EXTRA_PYTHON_LIBADD)'
      
        '+'#9'$(CYGWIN_EXTRA_LIBADD) $(CYGWIN_EXTRA_PYTHON_LIBADD) -lpython2' +
        '6'
      ' '
      ' GENERATE = generator.py')
    TokenTypeNames.Strings = (
      'file'
      'chunk'
      'line'
      'context'
      'default'
      'index'
      'unknown')
    Extentions = 'diff dif patch'
    LexerName = 'Diff'
    SkipSpaces = False
    Notes.Strings = (
      'Author: WhiteWind'
      'Improved: Alexey (Synwrite)')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal67: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Heading'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -19
        Font.Name = 'Consolas'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Quote'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12645824
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Consolas'
        Font.Style = []
      end
      item
        DisplayName = 'Codeblock'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15779980
      end
      item
        DisplayName = 'Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15779980
      end
      item
        DisplayName = 'Link'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 3289830
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Image'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 15086130
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reference'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13030
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Footnote'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 3277030
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'HTML Code'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 8404992
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Bold'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Italic'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Bold-Italic'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Definition'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 14737357
        BorderColorLeft = 16384
      end
      item
        DisplayName = 'List'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16763594
      end
      item
        DisplayName = 'Crossed out'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsStrikeOut]
      end>
    TokenRules = <
      item
        DisplayName = 'Bold-Italic'
        StyleName = 'Bold-Italic'
        TokenType = 1
        Expression = '(\*\*\*|___).*?(\*\*\*|___|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Bold'
        StyleName = 'Bold'
        TokenType = 1
        Expression = '(\*\*|__).*?(\*\*|__|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Italic'
        StyleName = 'Italic'
        TokenType = 1
        Expression = '#char after * is non-space'#13#10'(\*|_) \S.*? (\*|_|")'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Heading'
        StyleName = 'Heading'
        Expression = '^\#.* |'#13#10'.*\z--[-\x09\x20\|]* |'#13#10'.*\z=+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 2
        Expression = '(?s)\<!--.*?--\>  |'#13#10'(?s)/\*.*?\*/'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Quote'
        StyleName = 'Quote'
        TokenType = 3
        Expression = '^>.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HTML pre'
        StyleName = 'Codeblock'
        TokenType = 4
        Expression = '(?s) <pre> .+? </pre>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HTML Code'
        StyleName = 'HTML Code'
        TokenType = 9
        Expression = '\&[^;]+\; |'#13#10'</?\w+>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Link github'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[! \[ [^\]]+ \]\( [^\)]+ \) \] \( [^\)]+ \)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Link usual'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[[^\]]+\]\([^\)]+\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Image'
        StyleName = 'Image'
        TokenType = 12
        Expression = '!\[[^\]]+\]\([^\)]+\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Codeblock'
        StyleName = 'Codeblock'
        TokenType = 4
        Expression = '^(\x20{4,}|\x09{1,}).+$'#13#10'#Sometimes conflicts with Definition'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Footnote'
        StyleName = 'Footnote'
        TokenType = 7
        Expression = '^\[\^[^\]\^]+\]:.*?($|\z) |'#13#10'\[\^[^\]]+\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'List'
        StyleName = 'List'
        TokenType = 13
        Expression = 
          '^[\x20\x09]*(\d{1,3}\.|\-\ |+\ |\*\ |\+\ |[\(]?[a-z\d]?[\.\)]{1}' +
          ')|'#13#10'^\(@[^\)]*\)#pandoc list'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reference'
        StyleName = 'Reference'
        TokenType = 6
        Expression = 
          '^\[[^\]\^]+\]:.*?($|\z) |'#13#10'\[[^\]]+\]\[[^\]]+\] |'#13#10'\(@[^\)]*\) #' +
          'pandoc list reference'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Definition'
        StyleName = 'Definition'
        TokenType = 10
        Expression = 
          '^[\x20\t]*?.+(\z)+?*?^[\x20\t]*?:\ \ \ '#13#10'# Pandoc Style (:\ \ \ ' +
          ')'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block'
        StyleName = 'Block'
        TokenType = 5
        Expression = '(?s)(^```|`).*?(^```|`)|'#13#10'(?s)^~~~.*?^~~~)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Crossed Out'
        StyleName = 'Crossed out'
        TokenType = 1
        Expression = '(~~).*?(~~)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Footnote Inline'
        StyleName = 'Footnote'
        TokenType = 7
        Expression = '\^\[.+?\] #Pandoc Inline-Style'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Link wiki'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[.+?\] '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Usual text'
        StyleName = 'Text'
        TokenType = 1
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Header'
        ConditionList = <
          item
            TokenTypes = 1
          end>
        EndOfTextClose = True
        NameFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '[![Test](link here)](link here)'
      ''
      '# Header'
      '<!-- This is a comment -->'
      '/* This, too */'
      ''
      '`get_prop` id "token_type"; optional `get_prop` param'
      ''
      '`Inline Code` inside a paragraph with *italic*, '
      '**bold** and ***bold italic***, [^footnote] and + '
      '[reference][ref]. <HTML> syntax and special &harr; '
      'chars are highlighted, [Hyperlink text](url "title") '
      'and ![alternative text](image adress "title"). '
      '~~Crossed out~~ is supported, too. '
      ''
      '~~~'
      'Codeblocks'
      '~~~'
      ''
      '    Codeblock by indention'
      ''
      #9'1. But not for numbered'
      #9'-  or unordered lists'
      '    '#9'+ with several indentions'
      '        '#9'* leading digit, + - * '
      '1. note: unordered needs a sign & blank'
      #9'(a) extended Pandoc interpretation is supported'
      '    '#9'i) with roman numbering (i)    '
      ''
      '(@) Pandoc Numbered example lists'
      '(@ref) with or without reference, where (@ref) is'
      'handled as reference'
      ''
      '> quoted text'
      ''
      'Definition lists'
      ':   In a single line'
      ''
      '    indented definition lists'
      ''
      #9':   paragraph (blank line between)'
      ''
      '[ref]: url "title"'
      '[^footnote]: this is a footnote *italic* '
      ''
      '/* Optional */'
      'header'
      '='
      ''
      '```'
      'codeblock'
      '```'
      '    '
      '    ')
    TokenTypeNames.Strings = (
      'Heading'
      'Text'
      'Comment'
      'Quote'
      'Codeblock'
      'Block'
      'Reference'
      'Footnote'
      'Footnote-Inline'
      'HTML Code'
      'Definition'
      'Link'
      'Image'
      'List')
    Extentions = 'md markdown mkd'
    LexerName = 'Markdown'
    SkipSpaces = False
    Notes.Strings = (
      'Author: NoSi (v1.0 2014-01-20)'
      'Fixes: Alex (Synwrite) ')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal70: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Prefix'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -11
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Cmt sys'
        StyleName = 'Comment'
        Expression = '^\#.+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Prefix'
        StyleName = 'Prefix'
        TokenType = 1
        Expression = '^\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Cmt'
        StyleName = 'Comment'
        Expression = '\|.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Params'
        StyleName = 'Params'
        TokenType = 3
        Expression = '\(.*?\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '(?<=^\w+\x20+) [^\(\)\|\x20\n\r]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'type name (some params) |Comment'
      'typ name%20name params |Comment'
      'type name(params)'
      'typ name'
      'keyw some'
      'keyw some(test)'
      '')
    TokenTypeNames.Strings = (
      'Comment'
      'Prefix'
      'Id'
      'Params ')
    Extentions = 'acp'
    LexerName = 'SynWrite acp files'
    Notes.Strings = (
      'Alex (Synwrite)')
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id keyword def'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = '1st Tree item'
        StyleName = 'Id keyword def'
        TokenType = 11
        Expression = '^[\x20\x09]*(def|class)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st Keyword'
        StyleName = 'Id keyword'
        TokenType = 10
        Expression = 
          '^[\x20\x09]*(if|else|elif|for|while|try|except|finally|switch|ca' +
          'se|with)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st Number'
        StyleName = 'Number'
        TokenType = 9
        Expression = '^[\x20\x09]* \d+(\.\d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) ^[\x20\x09]* [rbu] ("""|'#39#39#39') .*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st Id'
        StyleName = 'Id'
        TokenType = 9
        Expression = '^[\x20\x09]*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st Attrib'
        StyleName = 'Symbol'
        TokenType = 9
        Expression = '^[\x20\x09]*@'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '1st Comment'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 13
        Expression = '^[\x20\x09]* \#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) [rbu]? ("""|'#39#39#39') .*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '[rbu]? ("|'#39') (\\.|.)*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0[xbo][0-9a-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+(\.\d*)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol :'
        StyleName = 'Symbol'
        TokenType = 12
        Expression = ':'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;\(\)=<>\+\-\[\]\{\}\^@!%\\\|~&]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords def'
        StyleName = 'Id keyword def'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'class'
              'def'
              'global'
              'lambda'
              'nonlocal')
            TokenTypes = 1540
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'as'
              'assert'
              'break'
              'continue'
              'del'
              'elif'
              'else'
              'except'
              'exec'
              'finally'
              'for'
              'from'
              'if'
              'import'
              'in'
              'is'
              'not'
              'or'
              'pass'
              'print'
              'raise'
              'return'
              'try'
              'while'
              'yield')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Id function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__future__'
              '__import__'
              'abs'
              'apply'
              'bool'
              'buffer'
              'callable'
              'chr'
              'classmethod'
              'cmp'
              'coerce'
              'complex'
              'delattr'
              'dict'
              'dir'
              'divmod'
              'enumerate'
              'eval'
              'execfile'
              'False'
              'file'
              'filter'
              'float'
              'getattr'
              'globals'
              'hasattr'
              'hash'
              'help'
              'hex'
              'id'
              'input'
              'int'
              'intern'
              'isinstance'
              'issubclass'
              'iter'
              'len'
              'list'
              'locals'
              'long'
              'map'
              'max'
              'min'
              'None'
              'NotImplemented'
              'object'
              'oct'
              'open'
              'ord'
              'pow'
              'property'
              'range'
              'raw_input'
              'reduce'
              'reload'
              'repr'
              'round'
              'self'
              'setattr'
              'slice'
              'staticmethod'
              'str'
              'sum'
              'super'
              'True'
              'tuple'
              'type'
              'unichr'
              'unicode'
              'vars'
              'xrange'
              'zip')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 8192
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8192
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block for tree'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 510
          end
          item
            TokenTypes = 2048
          end>
        EndOfTextClose = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        GroupIndex = 20
        CollapseFmt = '%s0 %s-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block for tree (ex)'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 1022
          end
          item
            TokenTypes = 2048
          end>
        EndOfTextClose = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        GroupIndex = 20
        CollapseFmt = '%s0 %s-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 510
          end
          item
            TokenTypes = 1024
          end>
        EndOfTextClose = True
        DisplayInTree = False
        NameFmt = '"%s0"'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        GroupIndex = 20
        CollapseFmt = '%sz0 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'import'
        ConditionList = <
          item
            TagList.Strings = (
              'from'
              'import')
            TokenTypes = 512
          end>
        NameFmt = '%sz0'
        GroupFmt = '\imports'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#Comment'
      'test = u"""Doc'
      'string""" +'
      'r"""test'
      '"""'
      'import sys, sys2, sys3'
      'from csv import aa, bb'
      'str = r'#39'\test\test'#39' + u'#39'test'#39' + r"\test"'
      'func = lambda x: x'
      ''
      '  def func(num):'
      '    for n in range(len(sys.argv)):'
      '      print "Arg %s" % sys.argv[n]'
      '      if n>2:'
      '        return True'
      '    return False        '
      ''
      'class MyName(object):      '
      '  @staticmethod'
      '  def func1(num):'
      '    pass'
      '   '
      'MyName().func1(num)')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      '1st word'
      '1st keyword'
      '1st word tree'
      'Symbol :'
      '1st comment')
    Extentions = 'py pyw rpy cpy sconstruct'
    LexerName = 'Python'
    SkipSpaces = False
    FullRefreshSize = 1000
    Notes.Strings = (
      'New Python lexer, by Alex (SynWrite)'
      'For indent-based folding lexer must be tweaked:'
      'see SynWrite lexer documentation about these tweaks.')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal4: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '`.*?`'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;:]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*=<>&/\|\^\.!%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'chan'
              'const'
              'continue'
              'default'
              'defer'
              'else'
              'fallthrough'
              'for'
              'func'
              'go'
              'goto'
              'if'
              'import'
              'interface'
              'map'
              'package'
              'range'
              'return'
              'select'
              'struct'
              'switch'
              'type'
              'var')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'keyw types'
        StyleName = 'Id type'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bool'
              'byte'
              'complex128'
              'complex64'
              'float32'
              'float64'
              'int'
              'int16'
              'int32'
              'int64'
              'int8'
              'len'
              'nil'
              'rune'
              'string'
              'uint'
              'uint16'
              'uint32'
              'uint64'
              'uint8'
              'uintptr')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              'func')
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%sz0...'
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        GrammaRuleName = 'comments'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'func (c *Chain) Generate(n int) string {'
      #9'var words []string'
      #9'for i := 0; i < n; i++ {'
      #9#9'if len(choices) == 0 {'
      #9#9#9'break'
      #9#9'}'
      #9'}'
      #9'return "Text" + '#39'Test'#39
      '}'
      ''
      'func NewChain(prefixLen int) *Chain {'
      #9'return `Ttt \d+`'
      '}'
      ''
      'func (p Prefix) Shift(word string) {'
      #9'p[len(p)-1] = word'
      '}    ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    Extentions = 'go'
    LexerName = 'Go'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref: http://golang.org/ref/spec')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal30: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'IdBad'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clYellow
      end
      item
        DisplayName = 'Value'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14017507
      end>
    TokenRules = <
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 3
        Expression = '(?s)(?<=text\=\z).*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        Expression = '^(name|id|lex|text)\b='
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdBad'
        StyleName = 'IdBad'
        Expression = '^.+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        TokenType = 2
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'name=name'
      'id=id'
      'lex=Pascal'
      'text='
      'Text here')
    TokenTypeNames.Strings = (
      'Id'
      'Symbol'
      'Value'
      'Text')
    Extentions = 'synw-snippet'
    LexerName = 'SynWrite snippets'
    SkipSpaces = False
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id Param'
        StyleName = 'Id Param'
        TokenType = 3
        Expression = '^\s*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 3
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 4
        Expression = '%\{ .+? \}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 2
        Expression = '("|'#39') (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 1
        Expression = '[/\*,\.\;:\(\)=<>\+\-\[\]\{\}%\|\&\\~\^\$!]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 1
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 1
          end
          item
            TokenTypes = 1
          end>
        BlockEnd = 'Block comment'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag'
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 2
          end>
        BlockOffset = 1
        BlockEnd = 'Tag end'
        NameFmt = '%sz1'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '/')
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 2
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<IfModule mod_rewrite.c>'
      #9'RewriteEngine On'
      #9'#RewriteBase /relative/web/path/'
      ''
      #9'RewriteCond %{REQUEST_URI} '#39'/favicon.ico'#39
      #9'RewriteRule ^(.*) index.php'
      ''
      #9'RewriteCond %{HTTP:Authorization}  !^$'
      #9'RewriteRule .* - [E=REMOTE_USER:%{HTTP:Authorization}] '
      '    '
      '  <Tag1>'
      '  #Folding none'
      '  </TagOther> '
      '  '
      '  <Tag2>'
      '  #Folding ok'
      '  </Tag2>'
      ''
      '</IfModule>')
    TokenTypeNames.Strings = (
      'Comment'
      'Symbol'
      'String'
      'Id'
      'Var')
    Extentions = '/.htaccess /.htpasswd /httpd.conf /fluentd.conf'
    LexerName = 'Apache config'
    SkipSpaces = False
    Notes.Strings = (
      'Alexey (SynWrite)')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Shebang'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#[\s\#\-].*$'#13#10'| \#\z'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '[$@%][$]?[a-zA-Z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-zA-Z_]\w* (::\w+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+(\.\d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'after'
              'append'
              'apply'
              'argc'
              'argv'
              'argv0'
              'array'
              'auto_execok'
              'auto_import'
              'auto_load'
              'auto_mkindex'
              'auto_path'
              'auto_qualify'
              'auto_reset'
              'bell'
              'bgerror'
              'binary'
              'bind'
              'bindtags'
              'bitmap'
              'break'
              'busy'
              'button'
              'canvas'
              'catch'
              'cd'
              'chan'
              'checkbutton'
              'clipboard'
              'clock'
              'close'
              'colors'
              'concat'
              'console'
              'constructor'
              'continue'
              'coroutine'
              'cursors'
              'dde'
              'destroy'
              'destructor'
              'dict'
              'encoding'
              'entry'
              'env'
              'eof'
              'error'
              'errorCode'
              'errorInfo'
              'eval'
              'event'
              'exec'
              'exit'
              'expr'
              'fblocked'
              'fconfigure'
              'fcopy'
              'file'
              'fileevent'
              'filename'
              'flush'
              'focus'
              'font'
              'fontchooser'
              'for'
              'foreach'
              'format'
              'frame'
              'geometry'
              'gets'
              'glob'
              'global'
              'grab'
              'grid'
              'history'
              'http'
              'if'
              'image'
              'incr'
              'info'
              'interp'
              'join'
              'keysyms'
              'label'
              'labelframe'
              'lappend'
              'lassign'
              'lindex'
              'linsert'
              'list'
              'listbox'
              'llength'
              'lmap'
              'load'
              'lower'
              'lrange'
              'lrepeat'
              'lreplace'
              'lreverse'
              'lsearch'
              'lset'
              'lsort'
              'mathfunc'
              'mathop'
              'memory'
              'menu'
              'menubutton'
              'message'
              'method'
              'msgcat'
              'my'
              'namespace'
              'next'
              'nextto'
              'oo::class'
              'oo::copy'
              'oo::define'
              'oo::objdefine'
              'oo::object'
              'open'
              'option'
              'options'
              'pack'
              'package'
              'panedwindow'
              'parray'
              'photo'
              'pid'
              'pkg_mkIndex'
              'pkg::create'
              'place'
              'platform'
              'platform::shell'
              'proc'
              'puts'
              'pwd'
              'radiobutton'
              'raise'
              're_syntax'
              'read'
              'refchan'
              'regexp'
              'registry'
              'regsub'
              'rename'
              'return'
              'safe'
              'safe::loadTk'
              'scale'
              'scan'
              'scrollbar'
              'seek'
              'selection'
              'self'
              'send'
              'set'
              'socket'
              'source'
              'spinbox'
              'split'
              'string'
              'subst'
              'switch'
              'tailcall'
              'Tcl'
              'tcl_endOfWord'
              'tcl_findLibrary'
              'tcl_interactive'
              'tcl_library'
              'tcl_nonwordchars'
              'tcl_patchLevel'
              'tcl_pkgPath'
              'tcl_platform'
              'tcl_precision'
              'tcl_rcFileName'
              'tcl_startOfNextWord'
              'tcl_startOfPreviousWord'
              'tcl_traceCompile'
              'tcl_traceExec'
              'tcl_version'
              'tcl_wordBreakAfter'
              'tcl_wordBreakBefore'
              'tcl_wordchars'
              'tcl::prefix'
              'tcltest'
              'tell'
              'text'
              'throw'
              'time'
              'tk'
              'tk_bisque'
              'tk_chooseColor'
              'tk_chooseDirectory'
              'tk_dialog'
              'tk_focusFollowsMouse'
              'tk_focusNext'
              'tk_focusPrev'
              'tk_getOpenFile'
              'tk_getSaveFile'
              'tk_library'
              'tk_menuSetFocus'
              'tk_messageBox'
              'tk_optionMenu'
              'tk_patchLevel'
              'tk_popup'
              'tk_setPalette'
              'tk_strictMotif'
              'tk_textCopy'
              'tk_textCut'
              'tk_textPaste'
              'tk_version'
              'tk::mac'
              'tkerror'
              'tkwait'
              'tm'
              'toplevel'
              'trace'
              'transchan'
              'try'
              'ttk_image'
              'ttk_vsapi'
              'ttk::button'
              'ttk::checkbutton'
              'ttk::combobox'
              'ttk::entry'
              'ttk::frame'
              'ttk::intro'
              'ttk::label'
              'ttk::labelframe'
              'ttk::menubutton'
              'ttk::notebook'
              'ttk::panedwindow'
              'ttk::progressbar'
              'ttk::radiobutton'
              'ttk::scale'
              'ttk::scrollbar'
              'ttk::separator'
              'ttk::sizegrip'
              'ttk::spinbox'
              'ttk::style'
              'ttk::treeview'
              'ttk::widget'
              'unknown'
              'unload'
              'unset'
              'update'
              'uplevel'
              'upvar'
              'variable'
              'vwait'
              'while'
              'winfo'
              'wm'
              'yield'
              'yieldto'
              'zlib')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'method'
              'oo::class'
              'proc')
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/usr/bin/env tclsh'
      '# Example code'
      'set example {1 2 3}'
      'e.g. {set'#39'add example 4} -> {1 2 3 4}'
      'e.g. {set'#39'add example 4} -> {1 2 3 4}'
      'book open "name \"substr\""'
      'proc set'#39'remove {_set args} {'
      '   upvar 1 $_set set'
      '   foreach el $args {'
      '       set pos [lsearch -exact $set $el]'
      '   }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number')
    Extentions = 'tcl tk tm'
    LexerName = 'Tcl'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias030 (SynWrite site admin)'
      'Improvements: Alex (SynWrite)'
      ''
      'Ref:'
      'http://www.tcl.tk/man/'
      'Not tested but maybe a good idea to test on:'
      
        'http://www.subdude-site.com/WebPages_Local/RefInfo/Computer/TclT' +
        'k/others_tcltkCode/others_tcltkCode.htm')
    LineComment = '# '
    Charset = DEFAULT_CHARSET
  end
end
